_G.ShowSeaHubUI = true
_G.Webhook = "https://discord.com/api/webhooks/1099711689450066060/_0cDSkNN4gfosy0oL-5i9Rg8BXF0hQ2Bu4d3H-AlCuZf1T8_3hL-qxi3X1mt1DrDtLcV"
_G.AdminRoleID = "1006505817769521177"

repeat wait() until game:IsLoaded() and game.Players.LocalPlayer and game.Players.LocalPlayer.PlayerGui and game.Players.LocalPlayer.Character
repeat wait() until game.ReplicatedStorage.src.Loader
wait(0.5)
if game.PlaceId ~= 8304191830 then
    repeat wait() until game.Players.LocalPlayer.PlayerGui.NewArea.holder.areaTitle.Text ~= "Planet Namek"
end
wait(1)
if http then
    -- // Close Sea Hub UI \\ --
    spawn(function()
        local IsGUIShow = false
        repeat
            wait(1.5)
            if game:GetService("CoreGui"):FindFirstChild("Sea Hub GUI") then
                IsGUIShow = true
            end
        until IsGUIShow == true
        if _G.ShowSeaHubUI == false then
            for i,v in pairs(game:GetService("CoreGui"):GetChildren()) do
                if string.find(v.Name, "Sea") then
                    v.Enabled = false
                end
            end
        end
    end)

    -- // Global Variable \\ --
        -- // Webhook Var \\ --
        local IconURL = "https://cdn.discordapp.com/attachments/1040229055498301511/1055558443076952115/logo.png"
        local LogoURL = "https://media.discordapp.net/attachments/1040229055498301511/1063251821998653621/giphy_1.gif"
        local EmbedColor = {
            ["IDK"] = tonumber(0xFF1493),
            ["Green"] = tonumber(0x61ff33),
            ["Red"] = tonumber(0xff0000),
            ["Cyan"] = tonumber(0x7a61ff),
            ["PPc"] = tonumber(0x7a61ff),
            
        }
        local XPFeedItemIcon = {
            ["senzu_bean"] = "<:Senzu_Bean:1042741743612862465>",
            ["coffee"] = "☕️",
            ["jjk_talisman"] = "<:Curse_Talisman:1042741729654218783>",
            ["xp_devil_fruit"] = "<:Devil_Fruit:1042741732388917288>",
            ["jojo_pendant"] = "<:JolynePendant:1055425562312708167>",
            ["aot_fluid"] = "<:Mysterious_Fluid:1042741739808636928>",
            ["soul_candy"] = "<:Soul_Candy:1042741746980900894>",
            ["fairy_tail_exp"] = "<:Magical_Artifact:1042741736998453310>",
            ["wisteria_flower"] = "<:Wisteria_Flower:1042741748922843136>",
            ["hxh_fish"] = "<:Cooked_Fish:1042741727632568340>",
            ["black_clover_stone"] = "<:Magic_Stone:1042741693755170847>",
            ["ramen_xp"] = "<:Ramen_Bowl:1042741742002257931>",
        }
        local StarFruitIcon = {
            ["StarFruitGreen"] = "<:Star_Fruit_2:1042744855811596368>",
            ["StarFruitBlue"] = "<:Star_Fruit_2999:1042744862950293636>",
            ["StarFruitRed"] = "<:Star_Fruit_299:1042744860395962430>",
            ["StarFruitPink"] = "<:Star_Fruit_Pink:1042744853777350686>",
            ["StarFruitEpic"] = "<:Star_Fruit_29:1042744858080706600>",
            ["StarFruit"] = "<:Star_Fruit:1042744851776667658>",
        }
        local MiscItemIcon = {
            ["LuckPotion"] = "<:Luck_Potion:1042745802130456647>",
            ["star_remnant"] = "<:Star_Remnant:1042744865202634752>",
            ["summon_ticket"] = "<:Summon_Ticket:1042744868004429854>",
            ["six_eyes"] = "<:Rikugan_Eye:1042744849532723210>",
        }
        
         function GetNumberFromString(S)
            return string.match(S,"%d+")
        end
        -- // In Game Var \\ --
        local Player = game:GetService("Players").LocalPlayer
        local Character = Player.Character
        local PlayerGui = Player.PlayerGui

        local GamePlaceID = 8304191830

        -- // In Game Service Var \\ --
        local HttpService = game:GetService("HttpService")
        local TweenService = game:GetService("TweenService")
        local VirtualInputManager = game:GetService("VirtualInputManager")

        local LevelPath = Player.PlayerGui["spawn_units"].Lives.Main.Desc.Level
        local GemPath = Player["_stats"]["gem_amount"]
        local GoldPath = Player["_stats"]["gold_amount"]
        local LvBP = Player.PlayerGui.BattlePass.Main.Level.V
        local TowerEnd = Player.PlayerGui.InfiniteTowerUI.LevelSelect.InfoFrame.LevelTitle

        local WaveCompleted = PlayerGui.ResultsUI.Holder.Middle.WavesCompleted
        local TimeCompleted = PlayerGui.ResultsUI.Holder.Middle.Timer
        local TitlePath = PlayerGui.NewArea.holder.areaTitle
        local DescriptionPath = PlayerGui.NewArea.holder.areaDescription
        local DifficultyPath = PlayerGui.NewArea.holder.Difficulty
        local InfoGameEnd = Player.PlayerGui.ResultsUI.Holder.Title
        

        local KillsInGame = Player["_stats"].kills
        local DMGsInGane = Player["_stats"]["damage_dealt_claimed"]

        -- // Script Info Var \\ --
        local BlockTweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)

        local Tier1Function = {"Story/Infinite", "Legend", "Dungeon", "Infinite Tower"}
        local Tier2Function = {"Challenge", "Christmas Challenge", "Mission"}
        local Tier3Function = {"Raid"}
        local AllDungeon = {"Cursed Parade", "Cursed Womb", "Karakora Town"}

        local DungeonTeleportDebounce = false
        local InfiniteTowerTeleportDebounce = false
        local ChallengeTeleportDebounce = false
        local MissionTeleportDebounce = false
        local TeleportDebounce = false
        local SetToCurrentTeamDebounce = false
        local BuyItemDebounce = false
        local NotifyDebounce = false
        local MissionDebounce = false
        local UnitDebounce = false
        local SummonDebounce = false
        local MouseClickDebounce = false

        local NextProgress = false
        local CanLeaveOrReplay = false

        local PlaceUnitDebounce = false
        local UpgradeUnitDebounce = false
        local SellUnitDebounce = false
        local LeaveOrReplayGameDebounce = false
        local CurrentUnitNumber = 1

        local RecordTimeDebounce = false
        local RecordingMacro = false
        local RecordInfo = {}
        local ActionId = 1
        local AllAlreadyDoAction = {}

        local Unit1Set = false
        local Unit2Set = false
        local Unit3Set = false
        local Unit4Set = false
        local Unit5Set = false
        local Unit6Set = false

        local AllFarmType = {"Auto Play", "Macro"}
        local AllTeam = {"None","Story/Infinite","Legend","Infinite 50","Dungeon","Challenge","Raid"}

        local UnitsFullPlaced = {}
        local NotAvailibleSell = {}
        local NotAvailiblePos = {}

        -- // Game Info Var \\ --
        local AllWorlds = {}
        local AllWorldsName = {}

        local AllActs = {
            ["Act 1"] = "_level_1",
            ["Act 2"] = "_level_2",
            ["Act 3"] = "_level_3",
            ["Act 4"] = "_level_4",
            ["Act 5"] = "_level_5",
            ["Act 6"] = "_level_6",
            ["Infinite"] = "_infinite",
        }
        local AllActsName = {
            "Act 1",
            "Act 2",
            "Act 3",
            "Act 4",
            "Act 5",
            "Act 6",
            "Infinite",
        }
        local AllLegendActsName = {}
        local AllChallengeTypes = {
            "Fast Enemies",
            "Regen Enemies",
            "Shield Enemies",
            "Tank Enemies",
            "High Cost",
            "Short Range",
        }
        local AllChallengeRewards = {
            "Extra Gems",
            "Extra Gold",
            "Star Fruit (Rainbow)",
            "Star Fruits (Random)",
            "Star Remnant",
        }

        -- // Gem Cost \\ --
        local SummonGemCost = tonumber(PlayerGui.HatchGuiNew.BannerFrames.EventClover.CostFrame.GemCost.Text)
        local SummonGuaranteeCost = SummonGemCost * 400
        local Summon10Cost = SummonGemCost * 10
        local Summon1Cost = SummonGemCost * 1

        _G.AllUnitsInGame = require(game.ReplicatedStorage.src.Loader).load_data(script, "Units")
        _G.AllItemsInGame = require(game.ReplicatedStorage.src.Loader).load_data(script, "Items")
        _G.AllWorldsInGame = require(game.ReplicatedStorage.src.Loader).load_data(script, "Worlds")
        _G.AllSellItemsInGame = require(game:GetService("ReplicatedStorage").src.Data.ItemsForSale)

        -- // All World In Game \\ --
        for i,v in pairs(_G.AllWorldsInGame) do
            local WorldName = v["name"]
            local WorldMap = string.split(v["levels"]["1"]["id"],"_")[1]
            if v["legend_stage"] then
                WorldName = WorldName.." [Legend]"
                AllLegendActsName[WorldName] = {}
                for ii,vv in pairs(v["levels"]) do
                    for iii,vvv in pairs(vv) do
                        local ActName = "_"..string.split(vvv,"_")[2].."_"..string.split(vvv,"_")[3]
                        AllActs[ActName] = ActName
                        WorldMap = string.split(vvv,"_")[1]
                        table.insert(AllLegendActsName[WorldName], ActName)
                    end
                end
            end
            AllWorlds[WorldName] = WorldMap
            table.insert(AllWorldsName, WorldName)
        end

        -- // All Sell Item In Game \\ --
        local AllItemsInMax = {}
        local AllSellItemsName = {}
        local AllSellItemsCost = {}
        for i,v in pairs(_G.AllSellItemsInGame) do
            table.insert(AllSellItemsName, i)
            if v["gem_cost"] then
                AllSellItemsCost[i] = {["Gem"] = v["gem_cost"]} 
            else
                AllSellItemsCost[i] = {["Gold"] = v["gold_cost"]} 
            end
        end
        table.sort(AllSellItemsName, function(a,b)
            return a:lower() < b:lower()
        end)

        -- // All Legendary And Mythic Units In Game \\ --
        local AllLegendaryAndMythicUnitsInGame = {}
        for i,v in pairs(_G.AllUnitsInGame) do
            if (v["rarity"] == "Mythic" or v["rarity"] == "Legendary") and v["evolved"] == nil then
                table.insert(AllLegendaryAndMythicUnitsInGame, v["name"].." #"..v["rarity"])
            end
        end
        table.sort(AllLegendaryAndMythicUnitsInGame, function(a,b)
            return a:lower() < b:lower()
        end)

        -- // Save System Var \\ --
        local FolderName = "PLaNS SHOP"
        local SettingsFileName = tostring(game.Players.LocalPlayer.Name).."_AnimeAdventure.json"
        local SettingsFilePath = FolderName..[[\]]..SettingsFileName
        local ImportFolderName = "Import Data"
        local ImportFolderPath = FolderName..[[\]]..ImportFolderName
        local ImportFilePath = ImportFolderPath..[[\]].."Data.json"

        local CurrentSettings = nil

        local DefaultSettings = {
            ["Units Config"] = {
                ["Unit 1"] = {
                    Name = false,
                    ID = false,
                },
                ["Unit 2"] = {
                    Name = false,
                    ID = false,
                },
                ["Unit 3"] = {
                    Name = false,
                    ID = false,
                },
                ["Unit 4"] = {
                    Name = false,
                    ID = false,
                },
                ["Unit 5"] = {
                    Name = false,
                    ID = false,
                },
                ["Unit 6"] = {
                    Name = false,
                    ID = false,
                },
            },
            ["Game Identifier"] = {
                ["Missions"] = {

                },
                ["Summon Sniper"] = {
                    ["Finded Units"] = {},
                },
                ["Webhook"] = {
                    ["Thumbnail URL"] = nil,
                    ["Max Gem"] = 0,
                    ["Max Tower"] = 0,
                },
            },
            ["In Game Config"] = {
                ["Auto Play"] = {
                    ["Story/Infinite, Challenge, Christmas Challenge, Mission (Story), Mission (Infinite), Infinite 50, Infinite Tower, Legend"] = {

                    },
                    ["Dungeon"] = {
                        
                    },
                },
                ["Macro"] = {
                    ["Selected Macro"] = nil,
                    ["All Macros"] = {

                    },
                    ["Selected Macros"] = {

                    },
                }
            },
            ["Config"] = {
                ["Miscellaneous"] = {
                    ["Auto Redeem Quest"] = true,
                    ["Auto Take Daily Event Quest"] = false,
                    ["Auto Take Mission Quest"] = true,
                },
                ["Webhook"] = {
                    ["URL"] = "",
                    ["ID"] = "",
                    ["Send When Return To Lobby"] = true,
                    ["Send When Round Started"] = true,
                    ["Send When Round Ended"] = true,
                    ["Check Currency"] = true,
                },
                ["Auto"] = {
                    ["Rejoin"] = {
                        ["Auto"] = false,
                        ["Difficulty"] = "Normal",
                        ["World"] = "Shiganshinu District",
                        ["Act"] = "Infinite",
                    },
                    ["Replay"] = {
                        ["Auto"] = false,
                    },
                    ["Upgrade"] = {
                        ["Cap"] = {
                            ["Cap"] = false,
                            ["Unit 1"] = 10,
                            ["Unit 2"] = 10,
                            ["Unit 3"] = 10,
                            ["Unit 4"] = 10,
                            ["Unit 5"] = 10,
                            ["Unit 6"] = 10,
                        },
                        ["Auto"] = false,
                        ["Wave"] = 7,
                    },
                    ["Skill"] = {
                        ["Auto"] = false,
                    },
                    ["Sell"] = {
                        ["Auto"] = false,
                        ["Wave"] = 25,
                    },
                    ["Leave"] = {
                        ["Auto"] = false,
                        ["Leave When Round Ended"] = false,
                        ["Wave"] = 1,
                    },
                },
                ["Team"] = {
                    ["Enable"] = false,
                    ["Story/Infinite"] = {
                        [1] = nil,
                        [2] = nil,
                        [3] = nil,
                        [4] = nil,
                        [5] = nil,
                        [6] = nil,
                    },
                    ["Legend"] = {
                        [1] = nil,
                        [2] = nil,
                        [3] = nil,
                        [4] = nil,
                        [5] = nil,
                        [6] = nil,
                    },
                    ["Infinite 50"] = {
                        [1] = nil,
                        [2] = nil,
                        [3] = nil,
                        [4] = nil,
                        [5] = nil,
                        [6] = nil,
                    },
                    ["Dungeon"] = {
                        [1] = nil,
                        [2] = nil,
                        [3] = nil,
                        [4] = nil,
                        [5] = nil,
                        [6] = nil,
                    },
                    ["Challenge"] = {
                        [1] = nil,
                        [2] = nil,
                        [3] = nil,
                        [4] = nil,
                        [5] = nil,
                        [6] = nil,
                    },
                    ["Raid"] = {
                        [1] = nil,
                        [2] = nil,
                        [3] = nil,
                        [4] = nil,
                        [5] = nil,
                        [6] = nil,
                    },
                },
                ["Shop"] = {
                    ["Merchant"] = {
                        ["Auto Buy"] = false,
                        ["Items"] = {},
                    },
                    ["Summon Sniper"] = {
                        ["Auto Summon"] = false,
                        ["Only Roll If Pity"] = false,
                        ["Use Summon Ticket"] = false,
                        ["Use Potion Lucky"] = false,
                        ["Special Banner"] = false,
                        ["Units"] = {},
                    },
                },
                ["Auto Farm"] = {
                    ["Tier 1"] = {
                        ["Auto Farm"] = false,
                        ["Selected Function"] = "Story/Infinite",
                        ["Story/Infinite"] = {
                            ["Farm Type"] = "Auto Play",
                        },
                        ["Legend"] = {
                            ["Farm Type"] = "Auto Play",
                        },
                        ["Dungeon"] = {
                            ["Selected Dungeon"] = AllDungeon[1],
                            ["Farm Type"] = "Auto Play",
                        },
                        ["Infinite Tower"] = {
                            ["Farm Type"] = "Auto Play",
                        },
                    },
                    ["Tier 2"] = {
                        ["Auto Farm"] = false,
                        ["Selected Function"] = "Challenge",
                        ["Challenge"] = {
                            ["Farm Type"] = "Auto Play",
                            ["Worlds"] = {},
                            ["Types"] = {},
                            ["Rewards"] = {},
                        },
                        ["Christmas Challenge"] = {
                            ["Farm Type"] = "Auto Play",
                            ["Worlds"] = {},
                            ["Types"] = {},
                        },
                        ["Mission"] = {
                            ["Farm Type"] = "Auto Play",
                            ["Auto Join"] = false
                        },
                    },
                    ["Tier 3"] = {
                        ["Auto Farm"] = false,
                        ["Selected Function"] = "Raid",
                        ["Raid"] = {
                            ["Farm Type"] = "Auto Play",
                        },
                    },
                }
            }

        }

    -- // Global Function \\ --
        -- // Save System Func \\ --
        function CheckFolderAndFile(CustomSettings)
            local SettingsToWrite = DefaultSettings
            if CustomSettings then
                SettingsToWrite = CustomSettings
            end
            if not isfolder(FolderName) then
                makefolder(FolderName)
                writefile(SettingsFilePath,HttpService:JSONEncode(SettingsToWrite))
                if not isfolder(FolderName..[[\]]..ImportFolderName) then
                    makefolder(FolderName..[[\]]..ImportFolderName)
                    writefile(ImportFilePath,HttpService:JSONEncode({}))
                end
            end
            if not isfile(SettingsFilePath) then
                writefile(SettingsFilePath,HttpService:JSONEncode(SettingsToWrite))
                if not isfolder(FolderName..[[\]]..ImportFolderName) then
                    makefolder(FolderName..[[\]]..ImportFolderName)
                    writefile(ImportFilePath,HttpService:JSONEncode({}))
                end
            end
        end
        function GetSettings()
            local Data = {}
            if isfile(SettingsFilePath) then
                pcall(function()
                    CheckFolderAndFile(CurrentSettings)
                    Data = HttpService:JSONDecode(readfile(SettingsFilePath))
                    CurrentSettings = Data
                end)
            end
            return Data
        end
        function UpdateInGameConfigAutoPlay(Mode, World, UnitID, X, Y, Z)
            CheckFolderAndFile(CurrentSettings)

            local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
            if not CurrentSettings["In Game Config"]["Auto Play"][Mode][World] then
                OldData["In Game Config"]["Auto Play"][Mode][World] = {}
                CurrentSettings["In Game Config"]["Auto Play"][Mode][World] = {}
            end
            OldData["In Game Config"]["Auto Play"][Mode][World][UnitID] = {["X"] = X, ["Y"] = Y, ["Z"] = Z}
            CurrentSettings["In Game Config"]["Auto Play"][Mode][World][UnitID] = {["X"] = X, ["Y"] = Y, ["Z"] = Z}
            writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
        end
        function UpdateTeam(Team, AllUnits)
            CheckFolderAndFile(CurrentSettings)
            local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
            for UnitNumber = 1,6 do
                OldData["Config"]["Team"][Team]["Unit "..tostring(UnitNumber)] = nil
                CurrentSettings["Config"]["Team"][Team]["Unit "..tostring(UnitNumber)] = nil
                for i,v in pairs(AllUnits) do
                    local UnitName = (string.split(v, " #"))[1] 
                    local UnitID = (string.split(v, " #"))[2] 
                    local ModelName = ""
                    for ii,vv in pairs(PlayerGui.collection.grid.List.Outer.UnitFrames:GetChildren()) do
                        if vv:IsA("ImageButton") and vv.name.Text == UnitName then
                            ModelName = vv.Main.petimage:FindFirstChildOfClass("Model").Name
                            ID = vv._uuid.Value
                        end
                    end
                    for ii,vv in pairs(PlayerGui["spawn_units"].Lives.Frame.Units:GetChildren()) do
                        if vv:IsA("ImageButton") and vv.Name == tostring(UnitNumber) and vv.Main.petimage.WorldModel:FindFirstChildOfClass("Model").Name == ModelName then
                            OldData["Config"]["Team"][Team]["Unit "..tostring(UnitNumber)] = UnitName.." #"..UnitID
                            CurrentSettings["Config"]["Team"][Team]["Unit "..tostring(UnitNumber)] = UnitName.." #"..UnitID
                        end
                    end
                end
            end

            writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
        end
        function UpdateGameIdentifierLevel1(Level1, Value)
            CheckFolderAndFile(CurrentSettings)
            local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
            OldData["Game Identifier"][Level1] = Value
            CurrentSettings["Game Identifier"][Level1] = Value
            writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
        end
        function UpdateGameIdentifierLevel2(Level1, Level2, Value)
            CheckFolderAndFile(CurrentSettings)
            local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
            OldData["Game Identifier"][Level1][Level2] = Value
            CurrentSettings["Game Identifier"][Level1][Level2] = Value
            writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
        end
        function UpdateConfigLevel2(Level1, Level2, Value)
            CheckFolderAndFile(CurrentSettings)
            local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
            OldData["Config"][Level1][Level2] = Value
            CurrentSettings["Config"][Level1][Level2] = Value
            writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
        end
        function UpdateConfigLevel3(Level1, Level2, Level3, Value)
            CheckFolderAndFile(CurrentSettings)
            local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
            OldData["Config"][Level1][Level2][Level3] = Value
            CurrentSettings["Config"][Level1][Level2][Level3] = Value
            writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
        end
        function UpdateConfigLevel4(Level1, Level2, Level3, Level4, Value)
            CheckFolderAndFile(CurrentSettings)
            local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
            OldData["Config"][Level1][Level2][Level3][Level4] = Value
            CurrentSettings["Config"][Level1][Level2][Level3][Level4] = Value
            writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
        end

        -- // Script Func \\ --
       
        function RandomFloat(minimum, maximum)
            return math.random()*(maximum-minimum) + minimum
        end
        function Round(num)
            return math.floor(num * 10) / 10;
          end;
        function Mouse1Click(RealX, RealY)
            X = 0
            Y = 0
            if RealX and RealY then
                X = RealX
                Y = RealY
            end
            VirtualInputManager:SendMouseButtonEvent(X, Y, 0, true, game, 1)
            VirtualInputManager:SendMouseButtonEvent(X, Y, 0, false, game, 1)
        end

        -- // Lib Func \\ --
        function AssignUnitSet(Groupbox, Mode, World)
            for i = 1,6 do
                spawn(function()
                    local UnitNumber = i
                    local UnitID = CurrentSettings["Units Config"]["Unit "..tostring(UnitNumber)]["ID"]
                    local UnitPos = Groupbox:AddLabel('Unit '..tostring(UnitNumber)..' : -', true)
                    if CurrentSettings["In Game Config"]["Auto Play"][Mode][World] and CurrentSettings["In Game Config"]["Auto Play"][Mode][World][UnitID] then
                        local UnitData = CurrentSettings["In Game Config"]["Auto Play"][Mode][World][UnitID]
                        local P = tostring(UnitData.X)..", "..tostring(UnitData.Y)..", "..tostring(UnitData.Z)
                        UnitPos:SetText('Unit '..tostring(UnitNumber)..' : '..P)
                    end
                    local UnitSet = Groupbox:AddButton('Set Position Unit '..tostring(UnitNumber), function()
                        local IsSet = false
                        local Mouse = Player:GetMouse()
                        Mouse.Button1Down:Connect(function()
                            if IsSet == false then
                                IsSet = true
                                local X = Mouse.Hit.Position.X
                                local Y = Mouse.Hit.Position.Y
                                local Z = Mouse.Hit.Position.Z
                                local Pos = Vector3.new(X,Y,Z)
                                local Block = Instance.new("Part",game:GetService("Workspace"))
                                Block.Material = Enum.Material.Neon
                                Block.Position = Pos
                                Block.Anchored = true
                                Block.CanCollide = true
                                Block.Size = Vector3.new(1,1,1)
                                local Tween = TweenService:Create(Block, BlockTweenInfo, {Transparency = 1})
                                UnitPos:SetText("Unit "..tostring(UnitNumber).." : "..tostring(Pos))
                                UpdateInGameConfigAutoPlay(Mode, World, UnitID, X, Y, Z)
    
                                delay(0.5, function()
                                    Tween:Play()
                                end)
                                delay(1.5, function()
                                    Block:Destroy()
                                end)
                            end
                        end)
                    end)
                end)
            end
        end
        function RefreshDropdown(Dropdown, Values)
            Dropdown.Values = Values
            Dropdown:SetValues()
            Dropdown:Display()
        end
        function Notify(Lib, Message)
            if NotifyDebounce == false then
                NotifyDebounce = true
                delay(1.5, function()
                    NotifyDebounce = false
                end)
                Lib:Notify(Message)
            end
        end
        function NotifyNoDebounce(Lib, Message)
            Lib:Notify(Message)
        end

        -- // Game Func \\ --
        function FindInfiniteTowerRoom()
            local Room = nil
            for i,v in pairs(PlayerGui.InfiniteTowerUI.LevelSelect.InfoFrame.LevelButtons:GetChildren()) do
                if v.Name == "FloorButton" then
                    if v.clear.Visible == false then

                        Room = GetNumberFromString(v.Main.text.Text)
                    end
                end
            end
            return tonumber(Room)
        end
        function FindChallengeRoom()
            local Room = nil
            for i,v in pairs(game:GetService("Workspace")["_CHALLENGES"].Challenges:GetChildren()) do
                if v.Active.Value == false then
                    Room = v.Name
                end
            end
            return Room
        end
        function FindChristmasChallengeRoom()
            local Room = nil
            for i,v in pairs(game:GetService("Workspace")["_EVENT_CHALLENGES"].Lobbies:GetChildren()) do
                if v.Active.Value == false then
                    Room = v.Name
                end
            end
            return Room
        end
        function FindRoom()
            local Room = nil
            for i,v in pairs(game:GetService("Workspace")["_LOBBIES"].Story:GetChildren()) do
                if v.Active.Value == false then
                    Room = v.Name
                end
            end
            return Room
        end
        function FindRoomForDungeon(itemtofind)
            local Room = nil
            for i,v in pairs(game:GetService("Workspace")["_DUNGEONS"].Lobbies:GetChildren()) do
                if string.find(itemtofind, "map") then
                    itemtofind = "jjk_raid"
                end
                if string.find(itemtofind, v.Level.Value) then
                    Room = v.Name
                    if v.Active.Value == true then
                        return false
                    end
                end
            end
            return Room
        end
        function StartRoom(Room, Map, Difficulty)
            game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(Room)
            local args = {
                [1] = Room,
                [2] = Map,
                [3] = true,
                [4] = Difficulty
            }

            game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(unpack(args))
            game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(Room)
        end
        function IsLobby()
            local islobby = false
            if game:GetService("Workspace"):FindFirstChild("_MAP_CONFIG"):FindFirstChild("IsLobby") then
                if game:GetService("Workspace")["_MAP_CONFIG"].IsLobby.Value == true then
                    islobby = true
                end
            end
            return islobby
        end
        function IsMission()
            local ismission = false
            for i,v in pairs(CurrentSettings["Game Identifier"]["Missions"]) do
                local CurrentWorld = PlayerGui.NewArea.holder.areaTitle.Text
                local CurrentAct = PlayerGui.NewArea.holder.areaDescription.Text
                local MissionWorld = string.split(v,"|")[1]
                local MissionAct = string.split(v,"|")[2]
                if CurrentWorld == MissionWorld and string.find(CurrentAct, MissionAct) then
                    ismission = true
                end
            end
            return ismission
        end
        function IsMission_Story()
            local ismission_story = false
            for i,v in pairs(CurrentSettings["Game Identifier"]["Missions"]) do
                local CurrentWorld = PlayerGui.NewArea.holder.areaTitle.Text
                local CurrentAct = PlayerGui.NewArea.holder.areaDescription.Text
                local MissionWorld = string.split(v,"|")[1]
                local MissionAct = string.split(v,"|")[2]
                if CurrentWorld == MissionWorld and string.find(CurrentAct, MissionAct) then
                    local FindNumber = GetNumberFromString(MissionAct)
                    if FindNumber then
                        ismission_story = true
                    else
                        ismission_story = false
                    end
                end
            end
            return ismission_story
        end
        function IsChallenge()
            local ischallenge = false
            local Difficulty = PlayerGui.NewArea.holder.Difficulty.Text
            local Title = PlayerGui.NewArea.holder.areaTitle.Text
            if string.find(Difficulty, "Challenge") and not string.find(Title, ")") then
                ischallenge = true 
            end
            return ischallenge
        end
        function IsChristmasChallenge()
            local ischristmaschallenge = false
            local Title = PlayerGui.NewArea.holder.areaTitle.Text
            if string.find(Title, ")") then
                ischristmaschallenge = true 
            end
            return ischristmaschallenge
        end
        function IsInfiniteTower()
            local isinfinitetower = false
            local Discription = PlayerGui.NewArea.holder.areaDescription.Text
            if string.find(Discription, "Room") then
                isinfinitetower = true 
            end
            return isinfinitetower
        end
        function IsCursedWomb()
            local iscursedwomb = false
            local Title = PlayerGui.NewArea.holder.areaDescription.Text
            if string.find(Title, "Womb") then
                iscursedwomb = true 
            end
            return iscursedwomb
        end
        function IsCursedParade()
            local iscursedparade = false
            local Title = PlayerGui.NewArea.holder.areaDescription.Text
            if string.find(Title, "Parade") then
                iscursedparade = true 
            end
            return iscursedparade
        end
        function IsKarakoraTown()
            local iskarakoratown = false
            local Title = PlayerGui.NewArea.holder.areaDescription.Text
            if string.find(Title, "Fire") then
                iskarakoratown = true 
            end
            return iskarakoratown
        end
        function IsDungeon()
            local CursedWomb = IsCursedWomb()
            local CursedParade = IsCursedParade()
            local KarakoraTown = IsKarakoraTown()

            if CursedWomb or CursedParade or KarakoraTown then
                return true
            else
                return false
            end
        end
        function IsNotAllDungeon()
            local CursedWomb = IsCursedWomb()
            local CursedParade = IsCursedParade()
            local KarakoraTown = IsKarakoraTown()

            if not CursedWomb and not CursedParade and not KarakoraTown then
                return true
            else
                return false
            end
        end
        function IsLegend()
            local islegend = false
            local Title = PlayerGui.NewArea.holder.areaDescription.Text
            if string.find(Title, "Legend") then
                islegend = true 
            end
            return islegend
        end
        function IsStoryandInfinite()
            local isstoryandinfinite = false
            if not IsMission() and not IsChallenge() and not IsChristmasChallenge() and not IsInfiniteTower() and IsNotAllDungeon() and not IsLegend() then
                isstoryandinfinite = true 
            end
            return isstoryandinfinite
        end
        function GetSelectedFarmType(Tier, Name)
            return CurrentSettings["Config"]["Auto Farm"]["Tier "..tostring(Tier)][Name]["Farm Type"]
        end
        function GetCurrentMode()
            local mode = false
            if IsStoryandInfinite() then
                mode = "Story/Infinite"
            elseif IsLegend() then
                mode = "Legend"
            elseif IsDungeon() then
                mode = "Dungeon"
            elseif IsInfiniteTower() then
                mode = "Infinite Tower"
            elseif IsChallenge() then
                mode = "Challenge"
            elseif IsChristmasChallenge() then
                mode = "Christmas Challenge"
            elseif IsMission() then
                mode = "Mission"
            end
            return mode
        end
        function GetCurrentModeForMacro()
            local mode = false
            if IsStoryandInfinite() or IsLegend() then
                mode = "Story/Infinite, Legend"
            elseif IsDungeon() then
                mode = "Dungeon"
            elseif IsChallenge() or IsMission_Story() then
                mode = "Challenge, Mission (Story)"
            elseif not IsMission_Story() or IsInfiniteTower() or IsChristmasChallenge() then
                mode = "Infinite 50, Mission (Infinite), Infinite Tower, Christmas Challenge"
            end
            return mode
        end
        function GetCurrentModeForAutoPlay()
            local mode = false
            if IsStoryandInfinite() or IsChallenge() or IsChristmasChallenge() or IsMission() or IsInfiniteTower() or IsLegend() then
                mode = "Story/Infinite, Challenge, Christmas Challenge, Mission (Story), Mission (Infinite), Infinite 50, Infinite Tower, Legend"
            elseif IsDungeon() then
                mode = "Dungeon"
            end
            return mode
        end
        function GetTier(Mode) 
            if table.find(Tier1Function, Mode) then
                return 1
            elseif table.find(Tier2Function, Mode) then
                return 2
            elseif table.find(Tier3Function, Mode) then
                return 3
            end
        end
        function GetCurrentLevel()
            local LevelText = LevelPath.Text
            return string.gsub(LevelText, "Level ", "")
        end
        function AutoPlay(Mode)
            local CurrentWorld = PlayerGui.NewArea.holder.areaTitle.Text
            if Mode == "Dungeon" then
                CurrentWorld = PlayerGui.NewArea.holder.areaDescription.Text
            end
            for i,v in pairs(AllWorldsName) do
                if string.find(CurrentWorld, v) then
                    CurrentWorld = v
                end
            end

            local CurrentUnits = CurrentSettings["Units Config"]
            local AllUnitsName = {}
            local AutoPlaySettings = CurrentSettings["In Game Config"]["Auto Play"][Mode][CurrentWorld]

            for i,v in pairs(CurrentUnits) do
                table.insert(AllUnitsName, v["ID"])
            end

            for UnitNumber = 1,6 do
                if CurrentUnitNumber == UnitNumber then
                    for i,v in pairs(AutoPlaySettings) do
                        local UnitID = i
                        if not table.find(UnitsFullPlaced, UnitID) and table.find(AllUnitsName, UnitID) then
                            local CurrentMoney = Player["_stats"].resource.Value
                            local UnitCost = CurrentUnits["Unit "..tostring(UnitNumber)]["Cost"]
                            if PlaceUnitDebounce == false and CurrentMoney >= UnitCost then
                                PlaceUnitDebounce = true
                                delay(0.35, function()
                                    PlaceUnitDebounce = false
                                end)
                                local UnitModelName = CurrentUnits["Unit "..tostring(UnitNumber)]["Model Name"]
                                local DefaultPlacePos = {
                                    ["X"] = v["X"],
                                    ["Y"] = v["Y"] + 0.5,
                                    ["Z"] = v["Z"],
                                }

                                local PlacePos = nil
                                local AllX = {}
                                local AllZ = {}
                                for ii,vv in pairs(game:GetService("Workspace")["_UNITS"]:GetChildren()) do
                                    if vv.Name == UnitModelName then
                                        table.insert(AllX, vv.HumanoidRootPart.Position.X)
                                        table.insert(AllZ, vv.HumanoidRootPart.Position.Z)
                                    end
                                end
                                repeat 
                                    local MinusOrPlus = math.random(0,1)
                                    local IsPosAvailible = true
                                    local FindPosX = 0
                                    local FindPosY = 0
                                    local FindPosZ = 0
                                    if MinusOrPlus == 0 then
                                        FindPosX = DefaultPlacePos["X"] + RandomFloat(0.5,1.5)
                                        FindPosY = DefaultPlacePos["Y"] + RandomFloat(0,5)
                                        FindPosZ = DefaultPlacePos["Z"] + RandomFloat(0.5,1.5)
                                    else
                                        FindPosX = DefaultPlacePos["X"] - RandomFloat(0.5,1.5)
                                        FindPosY = DefaultPlacePos["Y"]
                                        FindPosZ = DefaultPlacePos["Z"] - RandomFloat(0.5,1.5)
                                    end

                                    for ii,vv in pairs(NotAvailiblePos) do
                                        local NotAvailiblePosX = vv["X"]
                                        local NotAvailiblePosY = vv["Y"]
                                        local NotAvailiblePosZ = vv["Z"]
                                        if NotAvailiblePosX == FindPosX and NotAvailiblePosY == FindPosY and NotAvailiblePosZ == FindPosZ then
                                            IsPosAvailible = false
                                        end
                                    end

                                    if IsPosAvailible == true then
                                        PlacePos = CFrame.new(FindPosX, FindPosY, FindPosZ)
                                    end
                                until PlacePos
                                local args = {
                                    [1] = UnitID,
                                    [2] = PlacePos
                                }
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.spawn_unit:InvokeServer(unpack(args))
                                if PlayerGui.MessageGui.messages:FindFirstChild("Error") then
                                    if string.find(PlayerGui.MessageGui.messages.Error.Tex.Text, "more than") then
                                        table.insert(UnitsFullPlaced, UnitID)
                                        PlayerGui.MessageGui.messages.Error:Destroy()
                                    elseif string.find(PlayerGui.MessageGui.messages.Error.Tex.Text, "Unique") then
                                        table.insert(UnitsFullPlaced, UnitID)
                                        PlayerGui.MessageGui.messages.Error:Destroy()
                                    elseif string.find(PlayerGui.MessageGui.messages.Error.Tex.Text, "place unit") then
                                        table.insert(NotAvailiblePos, UnitID)
                                        PlayerGui.MessageGui.messages.Error:Destroy()
                                    else
                                        PlayerGui.MessageGui.messages.Error:Destroy()
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        function AutoMacro(Lib, Mode)
            local AllMacros = CurrentSettings["In Game Config"]["Macro"]["All Macros"]
            local AllMatchMacros = {}
            local World = ""
            if Mode == "Dungeon" then
                World = PlayerGui.NewArea.holder.areaDescription.Text
            elseif IsLegend() then
                World = PlayerGui.NewArea.holder.areaTitle.Text
            else
                for i,v in pairs(AllWorldsName) do
                    if string.find(PlayerGui.NewArea.holder.areaTitle.Text, v) then
                        World = v
                    end
                end
            end
            for i,v in pairs(AllMacros) do
                if v["Mode"] == Mode and v["World"] == World then
                    table.insert(AllMatchMacros, v["Data"])
                end
            end
            if #AllMatchMacros == 0 then
                Notify(Lib, "Error: Not Found Macro ["..Mode.."]!")
            elseif #AllMatchMacros > 1 then
                Notify(Lib, "Error: You Can Use 1 Macro ONLY ["..Mode.."]!")
            else
                for i,v in pairs(AllMatchMacros[1]) do
                    if _G.RecordTime and Round(v["Time"]) == Round(_G.RecordTime) and not table.find(AllAlreadyDoAction, v["Action ID"]) then
                        table.insert(AllAlreadyDoAction, v["Action ID"])
                        if v["Action"] == "Place" then
                            local UnitID = v["ID/Name"]
                            local PlacePosition = CFrame.new(v["Position"]["X"],v["Position"]["Y"]-1,v["Position"]["Z"])
                            local args = {
                                [1] = UnitID,
                                [2] = PlacePosition
                            }
                            game:GetService("ReplicatedStorage").endpoints.client_to_server.spawn_unit:InvokeServer(unpack(args))
                        end
                        if v["Action"] == "Upgrade" then
                            local UnitName = v["ID/Name"]
                            for ii,vv in pairs(game:GetService("Workspace")["_UNITS"]:GetChildren()) do
                                if vv.Name == UnitName and math.floor(vv.HumanoidRootPart.Position.X) == math.floor(v["Position"]["X"]) and math.floor(vv.HumanoidRootPart.Position.Z) == math.floor(v["Position"]["Z"]) then
                                    game:GetService("ReplicatedStorage").endpoints.client_to_server.upgrade_unit_ingame:InvokeServer(vv)
                                end
                            end
                        end
                        if v["Action"] == "Sell" then
                            local UnitName = v["ID/Name"]
                            for ii,vv in pairs(game:GetService("Workspace")["_UNITS"]:GetChildren()) do
                                if vv.Name == UnitName and math.floor(vv.HumanoidRootPart.Position.X) == math.floor(v["Position"]["X"]) and math.floor(vv.HumanoidRootPart.Position.Z) == math.floor(v["Position"]["Z"]) then
                                    game:GetService("ReplicatedStorage").endpoints.client_to_server.sell_unit_ingame:InvokeServer(vv)
                                end
                            end
                        end
                    end
                end
            end
        end
        function AutoUpgrade()
            local AllUnitsCost = {}
            local AllUnitsCostName = {}
            local BestUnitToUpgrade = nil
            for i,v in pairs(game:GetService("Workspace")["_UNITS"]:GetChildren()) do
                if v:FindFirstChild("_stats") and v._stats:FindFirstChild("base") and v._stats.base.Value == game:GetService("Workspace")["_BASES"].player then
                    if v._stats:WaitForChild("total_spent").Value == 1 then

                    else
                        local CurrentUpgradeLevel = tonumber(v["_stats"].upgrade.Value)
                        local NextUpgradeLevel = tonumber(v["_stats"].upgrade.Value) + 1
                        local UnitData = nil
                        for ii,vv in pairs(_G.AllUnitsInGame) do
                            if string.find(v.Name, ii) then
                                UnitData = vv
                            end
                        end
                        for ii,vv in pairs(UnitData) do
                            if ii == "upgrade" then
                                if vv[NextUpgradeLevel] then
                                    local UpgradeCapPass = false
                                    if CurrentSettings["Config"]["Auto"]["Upgrade"]["Cap"]["Cap"] == true then
                                        for iii,vvv in pairs(PlayerGui["spawn_units"].Lives.Frame.Units:GetChildren()) do
                                            if vvv:IsA("ImageButton") and vvv.Main.petimage.WorldModel:FindFirstChildOfClass("Model") then
                                                if vvv:IsA("ImageButton") and vvv.Main.petimage.WorldModel:FindFirstChildOfClass("Model").Name == v.Name then
                                                    local UnitNumber = "Unit "..tostring(vvv.Name)
                                                    local UpgradeCap = CurrentSettings["Config"]["Auto"]["Upgrade"]["Cap"][UnitNumber]

                                                    if UpgradeCap > CurrentUpgradeLevel then
                                                        UpgradeCapPass = true
                                                    end
                                                end
                                            end
                                        end
                                    else
                                        UpgradeCapPass = true
                                    end
                                    if UpgradeCapPass then
                                        local UpgradeCost = vv[NextUpgradeLevel]["cost"]
                                        table.insert(AllUnitsCost, UpgradeCost)
                                        AllUnitsCostName[UpgradeCost] = v
                                    end
                                end
                            end
                        end
                    end
                end
            end

            if #AllUnitsCost ~= 0 then
                local MinCost = math.min(table.unpack(AllUnitsCost))
                BestUnitToUpgrade = AllUnitsCostName[MinCost]
            end

            if BestUnitToUpgrade then
                local Ready = false
                local CurrentUpgradeLevel = tonumber(BestUnitToUpgrade["_stats"].upgrade.Value)
                local NextUpgradeLevel = tonumber(BestUnitToUpgrade["_stats"].upgrade.Value) + 1
                local UnitData = nil
                for ii,vv in pairs(_G.AllUnitsInGame) do
                    if string.find(BestUnitToUpgrade.Name, ii) then
                        UnitData = vv
                    end
                end
                if CurrentSettings["Config"]["Auto"]["Upgrade"]["Cap"]["Cap"] == true then
                    for ii,vv in pairs(PlayerGui["spawn_units"].Lives.Frame.Units:GetChildren()) do
                        if vv:IsA("ImageButton") and vv.Main.petimage.WorldModel:FindFirstChildOfClass("Model") then
                            if vv:IsA("ImageButton") and vv.Main.petimage.WorldModel:FindFirstChildOfClass("Model").Name == BestUnitToUpgrade.Name then
                                local UnitNumber = "Unit "..tostring(vv.Name)
                                local UpgradeCap = CurrentSettings["Config"]["Auto"]["Upgrade"]["Cap"][UnitNumber]
                                if UpgradeCap > CurrentUpgradeLevel then
                                    Ready = true
                                end
                            end
                        end
                    end
                else
                    Ready = true
                end
                if UnitData and Ready == true then
                    for ii,vv in pairs(UnitData) do
                        if ii == "upgrade" then
                            if vv[NextUpgradeLevel] then
                                local UpgradeCost = vv[NextUpgradeLevel]["cost"]
                                local CurrentMoney = Player["_stats"].resource.Value
                                if CurrentMoney >= UpgradeCost and UpgradeUnitDebounce == false then
                                    UpgradeUnitDebounce = true
                                    delay(0.5, function()
                                        UpgradeUnitDebounce = false
                                    end)
                                    game:GetService("ReplicatedStorage").endpoints.client_to_server.upgrade_unit_ingame:InvokeServer(BestUnitToUpgrade)
                                end
                            end
                        end
                    end
                end
            end
        end
        function AutoSell()
            if SellUnitDebounce == false then
                SellUnitDebounce = true
                delay(0.5, function()
                    SellUnitDebounce = false
                end)
                for i,v in pairs(game:GetService("Workspace")["_UNITS"]:GetChildren()) do
                    if v:FindFirstChild("_stats") and v._stats:FindFirstChild("base") and v._stats.base.Value == game:GetService("Workspace")["_BASES"].player and not table.find(NotAvailibleSell, v.Name) then
                        if v._stats.total_spent.Value == 1 then

                        else
                            game:GetService("ReplicatedStorage").endpoints.client_to_server.sell_unit_ingame:InvokeServer(v)
                            if PlayerGui.MessageGui.messages:FindFirstChild("Error") then
                                if string.find(PlayerGui.MessageGui.messages.Error.Tex.Text, "cannot") then
                                    table.insert(NotAvailibleSell, v.Name)
                                    PlayerGui.MessageGui.messages.Error:Destroy()
                                else
                                    PlayerGui.MessageGui.messages.Error:Destroy()
                                end
                            end
                        end
                    end
                end
            end
        end
        function AutoLeaveOrReplay()
            if LeaveOrReplayGameDebounce == false then
                LeaveOrReplayGameDebounce = true
                delay(3, function()
                    LeaveOrReplayGameDebounce = false
                end)
                if CanLeaveOrReplay == true then
                    if CurrentSettings["Config"]["Auto"]["Leave"]["Auto"] == true then
                        if CurrentSettings["Config"]["Auto"]["Leave"]["Leave When Round Ended"] == true then
                            game:GetService("ReplicatedStorage").endpoints["client_to_server"]["teleport_back_to_lobby"]:InvokeServer()
                        else
                            game:GetService("ReplicatedStorage").endpoints["client_to_server"]["teleport_back_to_lobby"]:InvokeServer()
                        end
                    end
                    if CurrentSettings["Config"]["Auto"]["Replay"]["Auto"] == true then
                        game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer("replay")
                    end
                end
            end
        end
        function SetUpGameIdentifier()
            if IsLobby() then
                -- // Mission Setup \\ --
                spawn(function()
                    while wait(1) do
                        local AllMissions = {}
                        for i,v in pairs(PlayerGui.QuestsUI.Main.Main.Main.Content.event.Scroll:GetChildren()) do
                            if v:IsA("Frame") then
                                if v:FindFirstChild("event") and string.find(v.event.Text, "Mission") and not string.find(v.event.Text, "Daily") and not string.find(v.QuestDescription.Text, "Thriller Park") then
                                    if v.ClaimQuest.Visible == false then
                                        local QuestData = v.QuestDescription.Text
                                        local World = nil
                                        local Act = nil
                                        for index,worldname in pairs(AllWorldsName) do 
                                            if string.find(QuestData, worldname) then
                                                World = worldname
                                            end
                                        end
                                        for index,actname in pairs(AllActsName) do 
                                            if string.find(QuestData, actname) then
                                                Act = actname
                                            end
                                        end
                                        table.insert(AllMissions, World.."|"..Act)
                                    elseif v.ClaimQuest.Visible == true then
                                        local CurrentAllMissions = CurrentSettings["Game Identifier"]["Missions"]
                                        local QuestData = v.QuestDescription.Text
                                        local World = nil
                                        local Act = nil
                                        for index,worldname in pairs(AllWorldsName) do 
                                            if string.find(QuestData, worldname) then
                                                World = worldname
                                            end
                                        end
                                        for index,actname in pairs(AllActsName) do 
                                            if string.find(QuestData, actname) then
                                                Act = actname
                                            end
                                        end
                                        for index,mission in pairs(CurrentAllMissions) do
                                            local MissionWorld = string.split(mission,"|")[1]
                                            local MissionAct = string.split(mission,"|")[2]
                                            if World == MissionWorld and Act == MissionAct then
                                                local DataIndex = table.find(CurrentAllMissions, mission)
                                                table.remove(CurrentAllMissions, DataIndex)
                                                AllMissions = CurrentAllMissions
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        local CurrentAllMissions = CurrentSettings["Game Identifier"]["Missions"]
                        for i,v in pairs(CurrentAllMissions) do 
                            if not table.find(AllMissions, v) then
                                table.remove(CurrentAllMissions, table.find(CurrentAllMissions, v))
                                UpdateGameIdentifierLevel1("Missions",AllMissions)
                            end
                        end
                        if #AllMissions ~= 0 then
                            UpdateGameIdentifierLevel1("Missions",AllMissions)
                        end
                    end
                end)
            end
        end

        -- // Summon Func \\ --
        function SetUpSummonSniper()
            PlayerGui.collection.grid.List.Outer.UnitFrames.ChildAdded:Connect(function(ob)
                if CurrentSettings["Game Identifier"]["Summoned Units"] ==  nil then
                    CurrentSettings["Game Identifier"]["Summoned Units"] = {}
                end
                table.insert(CurrentSettings["Game Identifier"]["Summoned Units"], ob.name.Text)
            end)
        end

        -- // Webhook Func \\ --
        function GetThumbnailURL(UID)
            local ThumbnailURL = CurrentSettings["Game Identifier"]["Webhook"]["Thumbnail URL"]
            if ThumbnailURL then
                return ThumbnailURL
            else
                local ThumbnailRequest = http.request(
                    {
                        Url = "https://thumbnails.roblox.com/v1/users/avatar-bust?userIds="..tostring(UID).."&size=420x420&format=Png&isCircular=false",
                        Method = "GET",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                    }
                )
                ThumbnailURL = (game:GetService("HttpService"):JSONDecode(ThumbnailRequest.Body))["data"][1]["imageUrl"]
                UpdateGameIdentifierLevel2("Webhook", "Thumbnail URL", ThumbnailURL)
                return ThumbnailURL
            end
        end

        function SendWebhook(Webhook, Content, Embed)
            local ThumbnailURL = GetThumbnailURL(Player.UserId)
            repeat task.wait() until ThumbnailURL
            Embed["footer"] = {["text"] = FolderName, ["icon_url"] = IconURL}        
            Embed["thumbnail"] = {["url"] = ThumbnailURL}
            Embed["timestamp"] = DateTime.now():ToIsoDate()
            Embed["type"] = "rich"

            http.request(
                {
                    Url = Webhook,
                    Method = "POST",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = game:GetService("HttpService"):JSONEncode(
                        {
                            ["content"] = Content,
                            ["embeds"] = {Embed}
                        }
                    )
                }
            )
        end
        function SendWebhook22(Webhook, Content, Embed)
            Embed["footer"] = {["text"] = FolderName, ["icon_url"] = IconURL}        
            Embed["timestamp"] = DateTime.now():ToIsoDate()
            Embed["type"] = "rich"

            http.request(
                {
                    Url = Webhook,
                    Method = "POST",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = game:GetService("HttpService"):JSONEncode(
                        {
                            ["content"] = Content,
                            ["embeds"] = {Embed}
                        }
                    )
                }
            )
        end
        function CheckCurrency(CurrentWebhook, RoundEndedDescription)
            RoundEndedDescription = RoundEndedDescription.."\n"
            local MaxGem = CurrentSettings["Game Identifier"]["Webhook"]["Max Gem"]
            local CurrentMode = GetCurrentMode()

            local FinishedFarmEmbedDescription = "**𝐍𝐀𝐌𝐄 :** ||%s||\n**<:Gems:1058285006755209267>・𝐆𝐄𝐌𝐒 : %s**\n**<a:2891bitcoin:1021469261274824764>・𝐆𝐎𝐋𝐃 : %s**\n**<a:3729_Little_Pretty_Star_Pink:1054740345709146182>・𝐋𝐞𝐯𝐞𝐥 : %s**\n\n```md\n#แมพที่ฟาร์ม\n- Map : %s```\nอย่าลืมรีวิวด้วยน้า·ʚ♡ɞ·\n<#1009544224720568371>\n<#1021662378250752080>\n\n<a:emoji_98_jk:1054831096929452042> ขอบคุณที่ใช้บริการน้า <a:8699rightrainbowstar:1054740408434966588>"       
            local FinishedFarmContent = "<@%s> <@&%s>"
            FinishedFarmEmbedDescription = string.format(FinishedFarmEmbedDescription, Player.Name, GemPath.Value, GoldPath.Value, GetCurrentLevel(), TitlePath.Text)
            FinishedFarmContent = string.format(FinishedFarmContent, CurrentSettings["Config"]["Webhook"]["ID"], _G.AdminRoleID)
            local FinishedFarmEmbed = {
                ["title"] = "**ฟามเสร็จแล้วเปลี่ยนรหัสได้เลย!**",
                ["description"] = FinishedFarmEmbedDescription,
                ["color"] = EmbedColor["PPc"],
                ["image"] = {["url"] = LogoURL},
            }

            if MaxGem > 0 then
                local GemAmount = tonumber(GetNumberFromString(PlayerGui.ResultsUI.Holder.LevelRewards.ScrollingFrame.GemReward.Main.Amount.Text))
                if GemAmount < 10000 then
                    if GemAmount >= MaxGem then
                        UpdateGameIdentifierLevel2("Webhook", "Max Gem", 0)
                        SendWebhook(_G.Webhook, FinishedFarmContent, FinishedFarmEmbed)
                    else
                        local NewMaxGem = MaxGem - GemAmount
                        UpdateGameIdentifierLevel2("Webhook", "Max Gem", NewMaxGem)
                    end
                end
                RoundEndedDescription = RoundEndedDescription..("```md\n- เหลือฟาร์มอีก "..tostring(CurrentSettings["Game Identifier"]["Webhook"]["Max Gem"]).." เพชร 💎```")
            end
            SendWebhook22(CurrentWebhook, " ", {
                ["title"] = "**✨ PLaNS SHOP ✨**",
                ["description"] = RoundEndedDescription,
                ["color"] = EmbedColor["PPc"],
            })
        end
        portal_boros = 0
        function SetUpWebhookSystem()
            local CurrentWebhook = CurrentSettings["Config"]["Webhook"]["URL"]
            if string.find(CurrentWebhook, "api/webhooks") then        
                if IsLobby() then
                   if CurrentSettings["Config"]["Webhook"]["Send When Return To Lobby"] then
                        
            if CurrentSettings["Config"]["Webhook"]["Send When Return To Lobby"] then     
                local description = " ———————————————\n**ข้อมูลผู้เล่น** ≧▽≦ <a:3018pinkheart:1019689700224684122>\n\n**Name : **||%s||\n<:Gems:1058285006755209267> **Gems : ** **%s**\n<:Gold:1058285013243805867> **Golds : %s**\n<a:5622bloodpotion:1047140829703180298> **%s**\n<:Ammo:1094340500867252244> **BattlePass Level :** %s\n<:Trophies:1094449191981416508> **%s **\n———————————————\n**EXP จากด่าน** <:4026pridepotion:1047140826897203311>"
                
                local ResultValue = {
                    ["Gem"] = game.Players.LocalPlayer["_stats"]["gem_amount"].Value,
                    ["Gold"] = game.Players.LocalPlayer["_stats"]["gold_amount"].Value,
                    ["Level"] = game:GetService("Players").LocalPlayer.PlayerGui["spawn_units"].Lives.Main.Desc.Level.Text,
                    ["LVBP"] = Player.PlayerGui.BattlePass.Main.Level.V.Text,
                    ["Tower Room"] = game:GetService("Players").LocalPlayer.PlayerGui.InfiniteTowerUI.LevelSelect.InfoFrame.LevelTitle.Text,
                    ["clover stone"] = "0x" ,
                    ["star"] = "0x" ,                    
                    ["Rikugan Eye"] = "0x",
                }

                
                description = description.."\n"
                for i,v in pairs(game:GetService("ReplicatedStorage")["_FX_CACHE"]:GetChildren()) do
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "senzu") and string.find(string.lower(v.Name), "bean") then
                        description = description..("<:Senzu_Bean:1042741743612862465>**・**ถั่วเขียว  : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "aot") and string.find(string.lower(v.Name), "fluid") then
                        description = description..("<:Mysterious_Fluid:1042741739808636928>**・**ไขสันหลังไททัน : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "wisteria") and string.find(string.lower(v.Name), "flower") then
                        description = description..("<:Wisteria_Flower:1042741748922843136>**・**ดอกฟูจิ : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "ramen") and string.find(string.lower(v.Name), "xp") then
                        description = description..("<:Ramen_Bowl:1042741742002257931>**・**ราเม็ง : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "xp_devil") and string.find(string.lower(v.Name), "fruit") then
                        description = description..("<:Devil_Fruit:1042741732388917288>**・**ผลปีศาจ : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "coffee") then
                        description = description..("☕️**・**กาแฟ : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "soul") and string.find(string.lower(v.Name), "candy") then
                        description = description..("<:Soul_Candy:1042741746980900894>**・**ลูกกวาดวิญญาณ : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "hxh") and string.find(string.lower(v.Name), "fish") then
                        description = description..("<:Cooked_Fish:1042741727632568340>**・**ปลาย่าง : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "fairy") and string.find(string.lower(v.Name), "exp") then
                        description = description..("<:Magical_Artifact:1042741736998453310>**・**แฟรี่ : "..v.OwnedAmount.Text.."\n")
                    end 
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "jjk") and string.find(string.lower(v.Name), "talisman") then
                        description = description..("<:Curse_Talisman:1042741729654218783>**・**ผ้ายันต์ : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "jojo") and string.find(string.lower(v.Name), "pendant") then
                        description = description..("<:Stone_Pendant:1075383093738864671>**・**สร้อยโจโจ้ : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "opm") and string.find(string.lower(v.Name), "core") then
                        description = description..("<:Alien_Core:1075383091440390225>**・**คอร์เอเลี่ยน : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find((v.Name), "quirk_shard") then
                        description = description..("<:Quirk_Shard:1094449189552918708>**・**เศษเสี้ยว : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find((v.Name), "7ds_pie") then
                        description = description..("<:7ds_Pie:1094452930607841340>**・**พาย : "..v.OwnedAmount.Text.."\n")
                    end       
                end 
                description = description.."<:Magic_Stone:1042741693755170847>**・**หินสีฟ้า(EXP) : %s\n"
            
                description = description.."———————————————\n**Raid item**  <:Awakened_Triple_Tomoe:1094459826995740672>\n"
                for i,v in pairs(game:GetService("ReplicatedStorage")["_FX_CACHE"]:GetChildren()) do
                    if v:IsA("ImageButton") and string.find((v.Name), "uchiha_") and string.find(string.lower(v.Name), "item") then
                        description = description..("<:Tomoe:1094340509851455569>**・**tomoe  : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find((v.Name), "west_city_frieza_item") then
                        description = description..("<:scouter:1088731891680682094>**・**Alien Scouter : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find((v.Name), "relic_shard") then
                        description = description..("<:Relic_Shard:1094340507838189719>**・**relic shard : "..v.OwnedAmount.Text.."\n")
                    end
                end
    
                description = description.."———————————————\n**Portal ประตูลับ** <a:HGWS_87:1054831644781051974>\n"
                portal_boros = 0
                portal_zeldris = 0 
                april_portal_item = 0

                for i,v in pairs(game:GetService("ReplicatedStorage")["_FX_CACHE"]:GetChildren()) do
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "portal_boros") and string.find(string.lower(v.Name), "g") then
                    portal_boros = (GetNumberFromString(portal_boros) + (GetNumberFromString(v.OwnedAmount.Text)))                        
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "portal_zeldris") then
                        portal_zeldris = (GetNumberFromString(portal_zeldris) + (GetNumberFromString(v.OwnedAmount.Text)))                        
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "april_portal") and string.find(string.lower(v.Name), "_item") then
                        april_portal_item = (GetNumberFromString(april_portal_item) + (GetNumberFromString(v.OwnedAmount.Text)))                        
                    end                
                end
                description = description..("<:alien_portal:1069655711899983953>**・**ประตูโบรอส : x"..portal_boros.."\n")
                description = description..("<:portal_zeldris:1094458475477733478>**・**ประตู7บาป : x"..portal_zeldris.."\n")
               
            
                description = description.."———————————————\n**Star Fruits**  <a:8699rightrainbowstar:1054740408434966588>\n"
            
                for i,v in pairs(game:GetService("ReplicatedStorage")["_FX_CACHE"]:GetChildren()) do
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "fruit") and string.find(string.lower(v.Name), "epic") then
                        description = description..("<:Star_Fruit_29:1042744858080706600>**・**ดาวสีรุ้ง  : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "fruit") and string.find(string.lower(v.Name), "blue") then
                        description = description..("<:Star_Fruit_2999:1042744862950293636>**・**ดาวสีน้ำเงิน : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "fruit") and string.find(string.lower(v.Name), "red") then
                        description = description..("<:Star_Fruit_299:1042744860395962430>**・**ดาวสีแดง : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "fruit") and string.find(string.lower(v.Name), "pink") then
                        description = description..("<:Star_Fruit_Pink:1042744853777350686>**・**ดาวสีชมพู : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find(string.lower(v.Name), "fruit") and string.find(string.lower(v.Name), "green") then
                        description = description..("<:Star_Fruit_2:1042744855811596368>**・**ดาวสีเขียว : "..v.OwnedAmount.Text.."\n")
                    end
                end
                description = description.."<:Star_Fruit:1042744851776667658>**・**ดาวสีเหลือง : %s\n"                 
                description = description.."———————————————\n**ไอเท็มอื่นๆ <a:espada:1047145577223295048> **\n"                          
                for i,v in pairs(game:GetService("ReplicatedStorage")["_FX_CACHE"]:GetChildren()) do
                    if v:IsA("ImageButton") and string.find((v.Name), "star_remnant") then
                        description = description..("<:Star_Remnant:1042744865202634752>**・**Star Remnant  : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find((v.Name), "LuckPotion") then
                        description = description..("<:Luck_Potion:1042745802130456647>**・**Luck Potion : "..v.OwnedAmount.Text.."\n")
                    end
                    if v:IsA("ImageButton") and string.find((v.Name), "summon_ticket") then
                        description = description..("<:Summon_Ticket:1042744868004429854>**・**Summon Ticket : "..v.OwnedAmount.Text.."\n")
                    end                   
                end
                description = description.."<:Rikugan_Eye:1042744849532723210>**・**ดวงตาโกโจ : %s\n"
                
                
                if game:GetService("ReplicatedStorage")["_FX_CACHE"]:FindFirstChild("StarFruit") then
                    ResultValue["star"] = game:GetService("ReplicatedStorage")["_FX_CACHE"]["StarFruit"].OwnedAmount.Text
                end
                if game:GetService("ReplicatedStorage")["_FX_CACHE"]:FindFirstChild("black_clover_stone") then
                    ResultValue["clover stone"] = game:GetService("ReplicatedStorage")["_FX_CACHE"]["black_clover_stone"].OwnedAmount.Text
                end                  
                if game:GetService("ReplicatedStorage")["_FX_CACHE"]:FindFirstChild("six_eyes") then
                    ResultValue["Rikugan Eye"] = game:GetService("ReplicatedStorage")["_FX_CACHE"]["six_eyes"].OwnedAmount.Text
                end

                --[[description = description.."———————————————\n**เลเวลตัวละคร <a:sao5:1047146934659465277>**\n"
                
                for i,v in pairs(game:GetService("ReplicatedStorage")["_FX_CACHE"].CollectionUnitFrame:GetChildren()) do
                    if v:IsA("ImageButton") and v.EquippedList.Equipped.Visible == true then
                        local CharacterName = v.name.Text
                        local CharacterLevel = v.Main.Level.Text
                        description = description..("[💂]"..CharacterName.." <a:8857pinkarrow:1021734806419148820> Level:"..CharacterLevel.."\n")
                    end
                end]]
                
                
                SendWebhook(CurrentWebhook, " ", {
                    ["title"] = "**✨ PLaNS SHOP ✨**",
                    ["description"] = string.format(
                                            description,
                                            game.Players.LocalPlayer.Name,
                                            ResultValue["Gem"],
                                            ResultValue["Gold"],                             
                                            ResultValue["Level"],
                                            ResultValue["LVBP"],
                                            ResultValue["Tower Room"],
                                            ResultValue["clover stone"],
                                            ResultValue["star"],                                                                    
                                            ResultValue["Rikugan Eye"]                         
                                        ),
                    ["color"] = EmbedColor["IDK"],
                })    
            end   
                                           
                        
               --[[         local LobbyEmbedDescription2 = "**Username:** ||%s||\n<a:emoji_98_jk:1054831096929452042> แจ้งเตือนสถานะ <a:8699rightrainbowstar:1054740408434966588>\n<a:reder:1054831728419672144> เล่นจบแล้วตอนนี้อยู่ในล็อบบี้ (ห้ามเข้ารหัสตอนนี้) <a:aHamsterRougeBoule:1054831885706084393>\n"
                        LobbyEmbedDescription2 = string.format(LobbyEmbedDescription2, Player.Name)
                        SendWebhook(CurrentWebhook, " ", {
                            ["title"] = "**✨ PLaNS SHOP ✨**",
                            ["description"] = LobbyEmbedDescription2,
                            ["color"] = EmbedColor["Red"],
                        })
                    end
                else
                    local InRoundEmbedDescription = "**Username:** ||%s||\n<a:emoji_98_jk:1054831096929452042> แจ้งเตือนสถานะ <a:8699rightrainbowstar:1054740408434966588>\n<a:greener:1054831716256206930> ตอนนี้อยู่ในแมพกำลังเริ่มฟาร์ม\n"
                    InRoundEmbedDescription = string.format(InRoundEmbedDescription, Player.Name)

                    SendWebhook22(CurrentWebhook, " ", {
                        ["title"] = "**✨ PLaNS SHOP ✨**",
                        ["description"] = InRoundEmbedDescription,
                        ["color"] = EmbedColor["Green"],
                    })]]--
                    spawn(function()
                        repeat wait(5) until game:GetService("Workspace")["_DATA"].GameFinished.Value == true
                        if CurrentSettings["Config"]["Webhook"]["Send When Round Ended"] then
                            local RoundEndedDescription = "🔒 Username : ||%s||\n```md\n#Profile\n💎 Gems : %s\n🟡 Golds : %s\n🧪 Level : %s```\n```md\n#Game Infomation\n- Game : %s\n- Map : %s\n- Difficulty: %s\n- Waves : %s | %s ```\n```md\n#Enemies Killed\n- %d Enemies\n- %.2f DMG```\n"                       
                            wait(3)
                            RoundEndedDescription = string.format(RoundEndedDescription, Player.Name, GemPath.Value , GoldPath.Value , GetCurrentLevel(), InfoGameEnd.Text, TitlePath.Text.." | "..DescriptionPath.Text, DifficultyPath.Text, GetNumberFromString(WaveCompleted.Text), TimeCompleted.Text, KillsInGame.Value, DMGsInGane.Value)
                            RoundEndedDescription = RoundEndedDescription..("```md\n#Rewards\n")
                            
                            local XPAmount = tonumber(GetNumberFromString(PlayerGui.ResultsUI.Holder.LevelRewards.ScrollingFrame.XPReward.Main.Amount.Text))
                            local GemAmount = tonumber(GetNumberFromString(PlayerGui.ResultsUI.Holder.LevelRewards.ScrollingFrame.GemReward.Main.Amount.Text))
                            
                            if GemAmount < 10000 then
                                RoundEndedDescription = RoundEndedDescription..("  ◈ [+ "..tostring(GemAmount).." Gems]\n")
                            end                          
                            RoundEndedDescription = RoundEndedDescription..("  ◈ [+ "..tostring(XPAmount).." XP]\n")
                            RoundEndedDescription = RoundEndedDescription..("```")

                            if CurrentSettings["Config"]["Webhook"]["Check Currency"] then
                                CheckCurrency(CurrentWebhook, RoundEndedDescription)
                            else
                                SendWebhook22(CurrentWebhook, " ", {
                                    ["title"] = "**✨ PLaNS SHOP ✨**",
                                    ["description"] = RoundEndedDescription,
                                    ["color"] = EmbedColor["PPc"],
                                })
                            end
                            delay(1, function()
                                CanLeaveOrReplay = true
                            end)
                        else
                            wait(1)
                            CanLeaveOrReplay = true
                        end
                    end)
                end
            end
        end

        -- // Claim Gift / Battle Pass Func \\ --
        function ClaimGiftAndBattlePass()
            if IsLobby() then
                pcall(function()
                    game:GetService("ReplicatedStorage").endpoints.client_to_server.claim_daily_reward:InvokeServer()
                    game:GetService("ReplicatedStorage").endpoints.client_to_server.claim_christmas_calendar_reward:InvokeServer()
                    --game:GetService("ReplicatedStorage").endpoints.client_to_server.claim_battlepass_rewards:InvokeServer()
                end)
            end
        end

        -- // Macro Func \\ --
        function GetAllMacros()
            local AllMacrosName = {"None"}
            for i,v in pairs(CurrentSettings["In Game Config"]["Macro"]["All Macros"]) do
                table.insert(AllMacrosName, i)
            end
            return AllMacrosName
        end
        function GetAllSelectedMacros()
            local AllMacrosName = {}
            for i,v in pairs(CurrentSettings["In Game Config"]["Macro"]["Selected Macros"]) do
                table.insert(AllMacrosName, i)
            end
            return AllMacrosName
        end
        function FindMacro(Dropdown, Keyword)
            local AllMacrosName = {}
            for i,v in pairs(GetAllMacros()) do
                local MacroName = string.lower(v)
                if string.find(MacroName, string.lower(Keyword)) then
                    table.insert(AllMacrosName, v)
                end
            end
            RefreshDropdown(Dropdown, AllMacrosName)
        end
        function FindUnit(Dropdown, Keyword)
            local AllUnits = {}
            for i,v in pairs(AllLegendaryAndMythicUnitsInGame) do
                local UnitName = string.lower(v)
                if string.find(UnitName, string.lower(Keyword)) then
                    table.insert(AllUnits, v)
                end
            end
            RefreshDropdown(Dropdown, AllUnits)
        end
        function RefreshAllMacrosDropdown()
            if Options["Select Macros"] and Options["Select Macro"] then
                RefreshDropdown(Options['Select Macros'], GetAllMacros())
                RefreshDropdown(Options['Select Macro'], GetAllMacros())
            end
        end
        function ExportMacro(Lib)
            CheckFolderAndFile(CurrentSettings)
            local MacrosData = CurrentSettings["In Game Config"]["Macro"]["All Macros"]
            writefile(ImportFilePath, HttpService:JSONEncode(MacrosData))
            Notify(Lib, "Success: Exported File!")
        end
        function ImportMacro(Lib)
            CheckFolderAndFile(CurrentSettings)
            local MacrosData = HttpService:JSONDecode(readfile(ImportFilePath))
            local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
            CurrentSettings["In Game Config"]["Macro"]["All Macros"] = MacrosData
            OldData["In Game Config"]["Macro"]["All Macros"] = MacrosData
            writefile(SettingsFilePath, HttpService:JSONEncode(OldData))

            RefreshAllMacrosDropdown()

            Notify(Lib, "Success: Imported File!")
        end
        function CheckMacro(Lib, MacroName)
            if CurrentSettings["In Game Config"]["Macro"]["All Macros"][MacroName] then
                if CurrentSettings["In Game Config"]["Macro"]["All Macros"][MacroName]["Mode"] and CurrentSettings["In Game Config"]["Macro"]["All Macros"][MacroName]["World"] and CurrentSettings["In Game Config"]["Macro"]["All Macros"][MacroName]["Data"] then
                    local Action = 0
                    for i,v in pairs(CurrentSettings["In Game Config"]["Macro"]["All Macros"][MacroName]["Data"]) do
                        Action = Action + 1
                    end
                    return {CurrentSettings["In Game Config"]["Macro"]["All Macros"][MacroName]["Mode"], CurrentSettings["In Game Config"]["Macro"]["All Macros"][MacroName]["World"], Action}
                else
                    Notify(Lib, "Error: Not Found Macro Data")
                end
            else
                Notify(Lib, "Error: Not Found Macro Name '"..tostring(MacroName).."'")
            end
        end
        function CreateMacro(Lib, Dropdown, Value)
            CheckFolderAndFile(CurrentSettings)
            if Value and Value ~= "" and Value ~= "None" then
                if CurrentSettings["In Game Config"]["Macro"]["All Macros"][Value] then
                    NotifyNoDebounce(Lib, "Error: Already Have Macro's Name "..Value)
                else
                    CheckFolderAndFile(CurrentSettings)
                    local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
                    OldData["In Game Config"]["Macro"]["All Macros"][Value] = {
                        ["Mode"] = false,
                        ["World"] = false,
                        ["Data"] = {

                        }
                    }
                    CurrentSettings["In Game Config"]["Macro"]["All Macros"][Value] = {
                        ["Mode"] = false,
                        ["World"] = false,
                        ["Data"] = {

                        }
                    }
                    writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
                    RefreshDropdown(Dropdown, GetAllMacros())
                    NotifyNoDebounce(Lib, "Success: Macro's Name "..Value.." Have Been Created!")
                end
            end
        end
        function DeleteMacro(Lib, Dropdown, Value)
            CheckFolderAndFile(Lib, CurrentSettings)
            if Value and Value ~= "" and Value ~= "None" then
                if CurrentSettings["In Game Config"]["Macro"]["All Macros"][Value] then
                    local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
                    CurrentSettings["In Game Config"]["Macro"]["All Macros"][Value] = nil
                    for i,v in pairs(CurrentSettings["In Game Config"]["Macro"]) do
                        if type(v) == "table" then
                            if table.find(v, Value) then
                                table.remove(v, table.find(vv, Value))
                            end
                        end
                    end
                    OldData = CurrentSettings
                    writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
                    RefreshDropdown(Dropdown, GetAllMacros())
                    NotifyNoDebounce(Lib, "Success: Macro's Name "..Value.." Have Been Deleted!")
                else
                    NotifyNoDebounce(Lib, "Error: Not Found Macro's Name "..Value)
                end
            end
        end
        function SetSelectMacro(MacroTable)
            local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
            OldData["In Game Config"]["Macro"]["Selected Macros"] = MacroTable
            CurrentSettings["In Game Config"]["Macro"]["Selected Macros"] = MacroTable
            writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
        end
        function UpdateMacro(Lib, Mode, World, Value)
            local MacroName = CurrentSettings["In Game Config"]["Macro"]["Selected Macro"]
            if MacroName ~= "None" and MacroName ~= "" then
                local MacroToSave = CurrentSettings["In Game Config"]["Macro"]["All Macros"][MacroName]
                if MacroToSave then
                    local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
                    OldData["In Game Config"]["Macro"]["All Macros"][MacroName]["Mode"] = Mode
                    OldData["In Game Config"]["Macro"]["All Macros"][MacroName]["World"] = World
                    OldData["In Game Config"]["Macro"]["All Macros"][MacroName]["Data"] = Value
                    MacroToSave["Mode"] = Mode
                    MacroToSave["World"] = World
                    MacroToSave["Data"] = Value
                    writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
                    NotifyNoDebounce(Lib, "Success: Your Macro Has Been Updated!")
                else
                    NotifyNoDebounce(Lib, "Error: Not Found Macro's Name "..Value)
                end
            end
        end
        function StartOrStopRecordMacro(Lib, Bool)
            if Bool == true then
                RecordInfo = {}
                ActionId = 0
            elseif Bool == false then
                local CurrentMode = GetCurrentModeForMacro()
                local CurrentWorld = ""
                if CurrentMode == "Dungeon" then
                    CurrentWorld = PlayerGui.NewArea.holder.areaDescription.Text
                elseif IsLegend() then
                    CurrentWorld = PlayerGui.NewArea.holder.areaTitle.Text
                else
                    for i,v in pairs(AllWorldsName) do
                        if string.find(PlayerGui.NewArea.holder.areaTitle.Text, v) then
                            CurrentWorld = v
                        end
                    end
                end
                UpdateMacro(Lib, CurrentMode, CurrentWorld, RecordInfo)
            end
        end
        function SetUpMacro()
            if not IsLobby() then
                spawn(function()
                    repeat wait() until game:GetService("Workspace")["_DATA"].GameStarted.Value == true
                    spawn(function()
                        game:GetService("RunService").Heartbeat:Connect(function()
                            if _G.RecordTime == nil then
                                _G.RecordTime = 0
                            end
                            if RecordTimeDebounce == false then
                                RecordTimeDebounce = true
                                delay(0.1, function()
                                    RecordTimeDebounce = false
                                end)
                                _G.RecordTime = _G.RecordTime + 0.1
                            end
                        end)
                    end)
                    game:GetService("Workspace")["_UNITS"].ChildAdded:Connect(function(Unit)
                        spawn(function()
                            repeat wait() until Unit:FindFirstChild("_stats")
                            repeat wait() until Unit._stats:FindFirstChild("uuid")
                            if Unit:FindFirstChild("_stats") and Unit._stats:FindFirstChild("base") and Unit._stats.base.Value == game:GetService("Workspace")["_BASES"].player then
                                if Unit._stats.total_spent.Value == 1 then
            
                                else
                                    Unit["_stats"].upgrade.Changed:Connect(function(Unit2)
                                        table.insert(RecordInfo, {
                                            ["ID/Name"] = Unit.Name,
                                            ["Time"] = _G.RecordTime,
                                            ["Position"] = {["X"] = Unit.HumanoidRootPart.Position.X, ["Y"] = Unit.HumanoidRootPart.Position.Y, ["Z"] = Unit.HumanoidRootPart.Position.Z},
                                            ["Action"] = "Upgrade",
                                            ["Action ID"] = ActionId,
                                        })
                                        ActionId = ActionId + 1
                                    end)
                                    table.insert(RecordInfo, {
                                        ["ID/Name"] = Unit._stats.uuid.Value,
                                        ["Time"] = _G.RecordTime,
                                        ["Position"] = {["X"] = Unit.HumanoidRootPart.Position.X, ["Y"] = Unit.HumanoidRootPart.Position.Y, ["Z"] = Unit.HumanoidRootPart.Position.Z},
                                        ["Action"] = "Place",
                                        ["Action ID"] = ActionId,
                                    })
                                    ActionId = ActionId + 1
                                end
                            end
                        end)
                    end)
                    game:GetService("Workspace")["_UNITS"].ChildRemoved:Connect(function(Unit)
                        if Unit:FindFirstChild("_stats") and Unit._stats:FindFirstChild("base") and Unit._stats.base.Value == game:GetService("Workspace")["_BASES"].player then
                            if Unit._stats.total_spent.Value == 1 then
        
                            else
                                table.insert(RecordInfo, {
                                    ["ID/Name"] = Unit.Name,
                                    ["Time"] = _G.RecordTime,
                                    ["Position"] = {["X"] = Unit.HumanoidRootPart.Position.X, ["Y"] = Unit.HumanoidRootPart.Position.Y, ["Z"] = Unit.HumanoidRootPart.Position.Z},
                                    ["Action"] = "Sell",
                                    ["Action ID"] = ActionId,
                                })
                                ActionId = ActionId + 1
                            end
                        end
                    end)
                end)
            end
        end

        -- // Unit Func \\ --
        function CheckUnlockedUnits()
            local UnlockedUnits = 0
            for i,v in pairs(PlayerGui["spawn_units"].Lives.Frame.Units:GetChildren()) do
                if v:IsA("ImageButton") and v:FindFirstChild("locked") and v.locked.Visible == false then
                    UnlockedUnits = UnlockedUnits + 1
                end
            end
            return UnlockedUnits
        end
        function GetAllUnits()
            local AllUnits = {}
            table.insert(AllUnits, "nil #{nil}")
            for i,v in pairs(PlayerGui.collection.grid.List.Outer.UnitFrames:GetChildren()) do
                if v:IsA("ImageButton") and v:FindFirstChild("name") and v:FindFirstChild("_uuid") then
                    table.insert(AllUnits, v.name.Text.." #"..v._uuid.Value)
                end
            end
            return AllUnits
        end
        function GetAllEquippedUnit()
            local EquippedUnits = {}
            for i,v in pairs(PlayerGui.collection.grid.List.Outer.UnitFrames:GetChildren()) do
                if v:IsA("ImageButton") and v:FindFirstChild("name") and v:FindFirstChild("_uuid") and v.EquippedList.Equipped.Visible == true then
                    table.insert(EquippedUnits, v.name.Text.." #"..v._uuid.Value)
                end
            end
            return EquippedUnits
        end
        function SetToCurrentTeam()
            local AllEquippedUnits = GetAllEquippedUnit()
            for i = 1,6 do
                local UnitNumber = 'Unit '..tostring(i)
                if Options[UnitNumber] then
                    Options[UnitNumber]:SetValue("nil #{nil}")
                end
            end
            for i,v in pairs(AllEquippedUnits) do
                local UnitNumber = 'Unit '..tostring(i)
                for ii,vv in pairs(PlayerGui.collection.grid.List.Outer.UnitFrames:GetChildren()) do
                    if vv:IsA("ImageButton") then
                        if vv.name.Text == string.split(v, " #")[1] then
                            local UnitModel = vv.Main.petimage:FindFirstChildOfClass("Model").Name
                            for iii,vvv in pairs(PlayerGui["spawn_units"].Lives.Frame.Units:GetChildren()) do
                                if vvv:IsA("ImageButton") then
                                    if vvv.Main.petimage.WorldModel:FindFirstChildOfClass("Model") then
                                        if vvv.Main.petimage.WorldModel:FindFirstChildOfClass("Model").Name == UnitModel then
                                            UnitNumber = "Unit "..tostring(vvv.Name)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                Options[UnitNumber]:SetValue(v)
            end
        end
        function UpdateUnit(Number, Name_ID)
            CheckFolderAndFile(CurrentSettings)
            if Name_ID then
                local UName = (string.split(Name_ID," #"))[1]
                local UID = (string.split(Name_ID," #"))[2]
                local UModel = "nil"
                local UCost = 0

                local UnitNumber = "Unit "..tostring(Number)

                for i,v in pairs(PlayerGui.collection.grid.List.Outer.UnitFrames:GetChildren()) do
                    if v:IsA("ImageButton") then
                        if v.name.Text == UName then
                            local UnitModel = v.Main.petimage:FindFirstChildOfClass("Model").Name
                            for ii,vv in pairs(PlayerGui["spawn_units"].Lives.Frame.Units:GetChildren()) do
                                if vv:IsA("ImageButton") then
                                    if vv.Main.petimage.WorldModel:FindFirstChildOfClass("Model") and vv.Main.petimage.WorldModel:FindFirstChildOfClass("Model").Name == UnitModel then
                                        UnitNumber = "Unit "..tostring(vv.Name)
                                        UModel = UnitModel
                                        UCost = tonumber(v.Cost.text.Text)
                                    end
                                end
                            end
                        end
                    end
                end

                local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
                OldData["Units Config"][UnitNumber]["Name"] = UName
                OldData["Units Config"][UnitNumber]["ID"] = UID
                OldData["Units Config"][UnitNumber]["Model Name"] = UModel
                OldData["Units Config"][UnitNumber]["Cost"] = UCost
                CurrentSettings["Units Config"][UnitNumber]["Name"] = UName
                CurrentSettings["Units Config"][UnitNumber]["ID"] = UID
                CurrentSettings["Units Config"][UnitNumber]["Model Name"] = UModel
                CurrentSettings["Units Config"][UnitNumber]["Cost"] = UCost
                writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
            end
        end
        function GetTeamDetail(Team)
            local AllUnitsInTeam = {}
            if type(CurrentSettings["Config"]["Team"][Team]) == "table" then
                AllUnitsInTeam = {}
                for i,v in pairs(CurrentSettings["Config"]["Team"][Team]) do
                    if string.find(tostring(v)," #") then
                        local UName = (string.split(v," #"))[1]
                        table.insert(AllUnitsInTeam, "Slot "..tostring(i).." : "..UName)
                    else
                        table.insert(AllUnitsInTeam, "None")
                    end
                end
            end
            return AllUnitsInTeam
        end
        function SwapTeam(TeamToSwap)
            local UnitsAmount = 0
            for i,v in pairs(TeamToSwap) do
                UnitsAmount = UnitsAmount + 1
            end
            if UnitsAmount ~= 0 then
                local CurrentTeam = {}
                for i,v in pairs(PlayerGui.collection.grid.List.Outer.UnitFrames:GetChildren()) do
                    if v:IsA("ImageButton") and v.EquippedList.Equipped.Visible == true then
                        table.insert(CurrentTeam, v.name.Text.." #"..v._uuid.Value)
                    end
                end
                local CheckUnit1 = table.find(CurrentTeam, TeamToSwap["Unit 1"])
                local CheckUnit2 = table.find(CurrentTeam, TeamToSwap["Unit 2"])
                local CheckUnit3 = table.find(CurrentTeam, TeamToSwap["Unit 3"])
                local CheckUnit4 = table.find(CurrentTeam, TeamToSwap["Unit 4"])
                local CheckUnit5 = table.find(CurrentTeam, TeamToSwap["Unit 5"])
                local CheckUnit6 = table.find(CurrentTeam, TeamToSwap["Unit 6"])

                local WaitTime = 0.3

                
                if not CheckUnit1 then
                    local Number = 1
                    local UnitNumber = "Unit "..tostring(Number)
                    if CurrentTeam[Number] == nil then
                        if TeamToSwap[UnitNumber] then
                            if UnitDebounce == false then
                                UnitDebounce = true
                                delay(WaitTime, function()
                                    UnitDebounce = false
                                end)
                                local UID = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.equip_unit:InvokeServer(UID)
                            end
                        else
                            CheckUnit1 = true
                        end
                    else
                        if UnitDebounce == false then
                            UnitDebounce = true
                            local UID = (string.split(CurrentTeam[Number], " #"))[2]
                            game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID)
                            if table.find(CurrentTeam, TeamToSwap[UnitNumber]) then
                                task.wait(WaitTime)
                                local UID2 = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID2)
                            end
                            delay(WaitTime, function()
                                UnitDebounce = false
                            end)
                        end
                    end
                end
                if not CheckUnit2 then
                    local Number = 2
                    local UnitNumber = "Unit "..tostring(Number)
                    if CurrentTeam[Number] == nil then
                        if TeamToSwap[UnitNumber] then
                            if UnitDebounce == false then
                                UnitDebounce = true
                                delay(WaitTime, function()
                                    UnitDebounce = false
                                end)
                                local UID = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.equip_unit:InvokeServer(UID)
                            end
                        else
                            CheckUnit2 = true
                        end
                    else
                        if UnitDebounce == false then
                            UnitDebounce = true
                            local UID = (string.split(CurrentTeam[Number], " #"))[2]
                            game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID)
                            if table.find(CurrentTeam, TeamToSwap[UnitNumber]) then
                                task.wait(WaitTime)
                                local UID2 = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID2)
                            end
                            delay(WaitTime, function()
                                UnitDebounce = false
                            end)
                        end
                    end
                end
                if not CheckUnit3 then
                    local Number = 3
                    local UnitNumber = "Unit "..tostring(Number)
                    if CurrentTeam[Number] == nil then
                        if TeamToSwap[UnitNumber] then
                            if UnitDebounce == false then
                                UnitDebounce = true
                                delay(WaitTime, function()
                                    UnitDebounce = false
                                end)
                                local UID = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.equip_unit:InvokeServer(UID)
                            end
                        else
                            CheckUnit3 = true
                        end
                    else
                        if UnitDebounce == false then
                            UnitDebounce = true
                            local UID = (string.split(CurrentTeam[Number], " #"))[2]
                            game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID)
                            if table.find(CurrentTeam, TeamToSwap[UnitNumber]) then
                                task.wait(WaitTime)
                                local UID2 = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID2)
                            end
                            delay(WaitTime, function()
                                UnitDebounce = false
                            end)
                        end
                    end
                end
                if not CheckUnit4 then
                    local Number = 4
                    local UnitNumber = "Unit "..tostring(Number)
                    if CurrentTeam[Number] == nil then
                        if TeamToSwap[UnitNumber] then
                            if UnitDebounce == false then
                                UnitDebounce = true
                                delay(WaitTime, function()
                                    UnitDebounce = false
                                end)
                                local UID = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.equip_unit:InvokeServer(UID)
                            end
                        else
                            CheckUnit4 = true
                        end
                    else
                        if UnitDebounce == false then
                            UnitDebounce = true
                            local UID = (string.split(CurrentTeam[Number], " #"))[2]
                            game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID)
                            if table.find(CurrentTeam, TeamToSwap[UnitNumber]) then
                                task.wait(WaitTime)
                                local UID2 = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID2)
                            end
                            delay(WaitTime, function()
                                UnitDebounce = false
                            end)
                        end
                    end
                end
                if not CheckUnit5 then
                    local Number = 5
                    local UnitNumber = "Unit "..tostring(Number)
                    if CurrentTeam[Number] == nil then
                        if TeamToSwap[UnitNumber] then
                            if UnitDebounce == false then
                                UnitDebounce = true
                                delay(WaitTime, function()
                                    UnitDebounce = false
                                end)
                                local UID = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.equip_unit:InvokeServer(UID)
                            end
                        else
                            CheckUnit5 = true
                        end
                    else
                        if UnitDebounce == false then
                            UnitDebounce = true
                            local UID = (string.split(CurrentTeam[Number], " #"))[2]
                            game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID)
                            if table.find(CurrentTeam, TeamToSwap[UnitNumber]) then
                                task.wait(WaitTime)
                                local UID2 = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID2)
                            end
                            delay(WaitTime, function()
                                UnitDebounce = false
                            end)
                        end
                    end
                end
                if not CheckUnit6 then
                    local Number = 6
                    local UnitNumber = "Unit "..tostring(Number)
                    if CurrentTeam[Number] == nil then
                        if TeamToSwap[UnitNumber] then
                            if UnitDebounce == false then
                                UnitDebounce = true
                                delay(WaitTime, function()
                                    UnitDebounce = false
                                end)
                                local UID = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.equip_unit:InvokeServer(UID)
                            end
                        else
                            CheckUnit6 = true
                        end
                    else
                        if UnitDebounce == false then
                            UnitDebounce = true
                            local UID = (string.split(CurrentTeam[Number], " #"))[2]
                            game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID)
                            if table.find(CurrentTeam, TeamToSwap[UnitNumber]) then
                                task.wait(WaitTime)
                                local UID2 = (string.split(TeamToSwap[UnitNumber], " #"))[2]
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.unequip_unit:InvokeServer(UID2)
                            end
                            delay(WaitTime, function()
                                UnitDebounce = false
                            end)
                        end
                    end
                end
                if CheckUnit1 and CheckUnit2 and CheckUnit3 and CheckUnit4 and CheckUnit5 and CheckUnit6 then
                    if SetToCurrentTeamDebounce == false then
                        SetToCurrentTeamDebounce = true
                        delay(15, function()
                            SetToCurrentTeamDebounce = false
                        end)
                        SetToCurrentTeam()
                    end
                    return true
                else
                    return nil
                end
            else
                return false
            end
        end

        -- // Script Func \\ --
        function IsTableEmpty(Table)
            local count = 0
            local result = true
            for i,v in pairs(Table) do
                count = count + 1
            end
            if count >= 1 then
                result = false
            end
            return result
        end
        function StartScript(Library)
            if IsLobby() then
                -- // Main Script \\ --
                local IsFinishedSummon = false
                local IsBoughtAllItems = false
                local IsTier3Finished = false
                local IsTier2Finished = false
                if CurrentSettings["Config"]["Shop"]["Merchant"]["Auto Buy"] == true or CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Auto Summon"] == true then
                    if CurrentSettings["Config"]["Shop"]["Merchant"]["Auto Buy"] == true then
                        local ItemsNeeded = CurrentSettings["Config"]["Shop"]["Merchant"]["Items"]
                        for i,v in pairs(PlayerGui.ItemShop.Window.Outer.ItemFrames:GetChildren()) do
                            if v:IsA("ImageButton") then
                                local ItemName = v.Name
                                local IsItemsNeeded = false
                                for ii,vv in pairs(ItemsNeeded) do
                                    IsItemsNeeded = true
                                end
                                if IsItemsNeeded then
                                    for ii,vv in pairs(ItemsNeeded) do
                                        if string.find(ItemName, ii) and not table.find(AllItemsInMax, ItemName) then
                                            local IsHasEnoughMoney = false
                                            local CurrentGold = Player["_stats"]["gold_amount"].Value
                                            local CurrentGem = Player["_stats"]["gem_amount"].Value
                                            local ItemCost = AllSellItemsCost[ii]
                                            if ItemCost["Gem"] then
                                                if CurrentGem >= ItemCost["Gem"] then
                                                    IsHasEnoughMoney = true
                                                end
                                            elseif ItemCost["Gold"] then
                                                if CurrentGold >= ItemCost["Gold"] then
                                                    IsHasEnoughMoney = true
                                                end
                                            end
                                            if BuyItemDebounce == false and IsHasEnoughMoney == true then
                                                BuyItemDebounce = true
                                                delay(0.5, function()
                                                    BuyItemDebounce = false
                                                end)
                                                game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_travelling_merchant_item:InvokeServer(ItemName)
                                                if PlayerGui.MessageGui.messages:FindFirstChild("Error") then
                                                    if string.find(PlayerGui.MessageGui.messages.Error.Tex.Text, "full") then
                                                        table.insert(AllItemsInMax, ItemName)
                                                        PlayerGui.MessageGui.messages.Error:Destroy()
                                                    end
                                                end
                                            end
                                        end
                                    end
                                    IsBoughtAllItems = true
                                else
                                    IsBoughtAllItems = true
                                end
                            end
                        end
                    else
                        IsBoughtAllItems = true
                    end
                    if CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Auto Summon"] == true then
                        local CurrentGem = Player["_stats"]["gem_amount"].Value
                        local UnitsNeeded = CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Units"]
                        local AllUnitsToFind = {}
                        for i,v in pairs(UnitsNeeded) do
                            local UnitName = i
                            if string.find(UnitName, "Mythic") then
                                local NewUnitName = string.gsub(UnitName, " #Mythic", "")
                                table.insert(AllUnitsToFind, NewUnitName)
                            elseif string.find(UnitName, "Legendary") then
                                local NewUnitName = string.gsub(UnitName, " #Legendary", "")
                                table.insert(AllUnitsToFind, NewUnitName)
                            end
                        end

                        local RollPityPass = false
                        if CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Only Roll If Pity"] == true then
                            local NeededGem = SummonGuaranteeCost
                            if CurrentGem >= NeededGem then
                                RollPityPass = true
                            else
                                IsFinishedSummon = true
                            end
                        else
                            RollPityPass = true
                        end

                        if RollPityPass == true then
                            local SpecialBannerPass = false
                            if CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Special Banner"] == true then
                                local Current50PercentUnit = PlayerGui.HatchGuiNew.BannerFrames.EventClover.Main["Featured_One"].name.Text
                                local IsFindedUnit = false
                                for i,v in pairs(AllUnitsToFind) do
                                    if Current50PercentUnit == v and not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], Current50PercentUnit) then
                                        IsFindedUnit = true
                                    end
                                end
                                if IsFindedUnit == true then
                                    if CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Use Summon Ticket"] == true then
                                        if not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], Current50PercentUnit) and SummonDebounce == false then
                                            SummonDebounce = true
                                            delay(2.5, function()
                                                SummonDebounce = false
                                            end)
                                            local args = {
                                                [1] = "EventClover",
                                                [2] = "ticket"
                                            }
                                            game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(unpack(args))
                                        end
                                    else
                                        if CurrentGem >= Summon10Cost then
                                            if not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], Current50PercentUnit) and SummonDebounce == false then
                                                SummonDebounce = true
                                                delay(5, function()
                                                    SummonDebounce = false
                                                end)
                                                local args = {
                                                    [1] = "EventClover",
                                                    [2] = "gems10"
                                                }
                                                game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(unpack(args))
                                            end
                                        elseif CurrentGem >= Summon1Cost then
                                            if not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], Current50PercentUnit) and SummonDebounce == false then
                                                SummonDebounce = true
                                                delay(5, function()
                                                    SummonDebounce = false
                                                end)
                                                local args = {
                                                    [1] = "EventClover",
                                                    [2] = "gems"
                                                }
                                                game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(unpack(args))
                                            end
                                        else
                                            IsFinishedSummon = true
                                        end
                                    end

                                    if MouseClickDebounce == false then
                                        MouseClickDebounce = true
                                        delay(0.25, function()
                                            MouseClickDebounce = false
                                        end)
                                        Mouse1Click()
                                    end

                                    if CurrentSettings["Game Identifier"]["Summoned Units"] then
                                        for i,v in pairs(CurrentSettings["Game Identifier"]["Summoned Units"]) do
                                            if not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], Current50PercentUnit) and Current50PercentUnit == v then
                                                local Data = CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"]
                                                table.insert(Data, Current50PercentUnit)
                                                UpdateGameIdentifierLevel2("Summon Sniper", "Finded Units", Data)
                                            end
                                        end
                                    end
                                else
                                    SpecialBannerPass = true
                                end
                            else
                                SpecialBannerPass = true
                            end
                            if SpecialBannerPass == true then
                                local CurrentLegendaryStandardUnit = _G.AllUnitsInGame[PlayerGui.HatchGuiNew.BannerFrames.Standard.Main.Scroll["5"].Main.petimage.WorldModel:FindFirstChildOfClass("Model").Name]["name"]
                                local CurrentMythicStandardUnit = _G.AllUnitsInGame[PlayerGui.HatchGuiNew.BannerFrames.Standard.Main.Scroll["6"].Main.petimage.WorldModel:FindFirstChildOfClass("Model").Name]["name"]
                                local IsFindedUnit = false
                                for i,v in pairs(AllUnitsToFind) do
                                    if (CurrentLegendaryStandardUnit == v and not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], CurrentLegendaryStandardUnit)) or (CurrentMythicStandardUnit == v and not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], CurrentMythicStandardUnit)) then
                                        IsFindedUnit = true
                                    end
                                end
                                if IsFindedUnit == true then
                                    if CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Use Summon Ticket"] == true then
                                        if ((not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], CurrentLegendaryStandardUnit)) or (not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], CurrentMythicStandardUnit))) and SummonDebounce == false then
                                            SummonDebounce = true
                                            delay(2.5, function()
                                                SummonDebounce = false
                                            end)
                                            local args = {
                                                [1] = "Standard",
                                                [2] = "ticket"
                                            }
                                            game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(unpack(args))
                                        end
                                    else
                                        if CurrentGem >= Summon10Cost then
                                            if ((not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], CurrentLegendaryStandardUnit)) or (not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], CurrentMythicStandardUnit))) and SummonDebounce == false then
                                                SummonDebounce = true
                                                delay(5, function()
                                                    SummonDebounce = false
                                                end)
                                                local args = {
                                                    [1] = "Standard",
                                                    [2] = "gems10"
                                                }
                                                game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(unpack(args))
                                            end
                                        elseif CurrentGem >= Summon1Cost then
                                            if ((not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], CurrentLegendaryStandardUnit)) or (not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], CurrentMythicStandardUnit))) and SummonDebounce == false then
                                                SummonDebounce = true
                                                delay(5, function()
                                                    SummonDebounce = false
                                                end)
                                                local args = {
                                                    [1] = "Standard",
                                                    [2] = "gems"
                                                }
                                                game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(unpack(args))
                                            end
                                        else
                                            IsFinishedSummon = true
                                        end
                                    end

                                    if MouseClickDebounce == false then
                                        MouseClickDebounce = true
                                        delay(0.25, function()
                                            MouseClickDebounce = false
                                        end)
                                        Mouse1Click()
                                    end

                                    if CurrentSettings["Game Identifier"]["Summoned Units"] then
                                        for i,v in pairs(CurrentSettings["Game Identifier"]["Summoned Units"]) do
                                            if not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], CurrentLegendaryStandardUnit) and CurrentLegendaryStandardUnit == v then
                                                local Data = CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"]
                                                table.insert(Data, CurrentLegendaryStandardUnit)
                                                UpdateGameIdentifierLevel2("Summon Sniper", "Finded Units", Data)
                                            end
                                            if not table.find(CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"], CurrentMythicStandardUnit) and CurrentMythicStandardUnit == v then
                                                local Data = CurrentSettings["Game Identifier"]["Summon Sniper"]["Finded Units"]
                                                table.insert(Data, CurrentMythicStandardUnit)
                                                UpdateGameIdentifierLevel2("Summon Sniper", "Finded Units", Data)
                                            end
                                        end
                                    end
                                else
                                    IsFinishedSummon = true
                                end
                            end
                        end
                    else
                        IsFinishedSummon = true
                    end
                else
                    IsFinishedSummon = true
                    IsBoughtAllItems = true
                end
                if IsBoughtAllItems and IsFinishedSummon then
                    if CurrentSettings["Config"]["Auto Farm"]["Tier 3"]["Auto Farm"] == true then

                    else
                        IsTier3Finished = true
                    end
                    if CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Auto Farm"] == true and IsTier3Finished == true then
                        if CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Selected Function"] == "Mission" then
                            local Ready = false

                            if CurrentSettings["Config"]["Team"]["Enable"] == true then
                                local TeamToSwap = CurrentSettings["Config"]["Team"]["Infinite 50"]
                                local Res = SwapTeam(TeamToSwap)
                                if Res == false then
                                    Notify(Library, "Error: Not Found Team [Infinite 50]!")
                                elseif Res == nil then
                                    Notify(Library, "Pending: Swapping Team!")
                                elseif Res == true then
                                    Ready = true
                                end
                            else
                                Ready = true
                            end
                            if CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Mission"]["Auto Join"] == true then
                                local AllMissions = CurrentSettings["Game Identifier"]["Missions"]
                                if #AllMissions ~= 0 then
                                    local SelectedMission = AllMissions[1]
                                    local World = AllWorlds[(string.split(SelectedMission,"|")[1])]
                                    local Act = AllActs[string.split(SelectedMission,"|")[2]]
                                    local Map = World..Act
                                    local Room = FindRoom()
                                    local Difficulty = "Normal"

                                    if Act == "_infinite" then
                                        Difficulty = "Hard"
                                    end
                                    if string.find(string.split(SelectedMission,"|")[1], "Legend") then
                                        Difficulty = "Hard"
                                    end
                                    if Ready == true and Player.TeleportingLock.Value == false and MissionTeleportDebounce == false then
                                        MissionTeleportDebounce = true
                                        StartRoom(Room, Map, Difficulty)
                                        delay(5, function()
                                            MissionTeleportDebounce = false
                                        end)
                                    end
                                else
                                    IsTier2Finished = true
                                end
                            end
                        elseif CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Selected Function"] == "Challenge" then
                            local Worlds = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Challenge"]["Worlds"]
                            local Types = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Challenge"]["Types"]
                            local Rewards = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Challenge"]["Rewards"]

                            if IsTableEmpty(Worlds) then
                                Notify(Library, "Error: Please Select Challenge Worlds [Challenge]!")
                            elseif IsTableEmpty(Types) then
                                Notify(Library, "Error: Please Select Challenge Types [Challenge]!")
                            elseif IsTableEmpty(Rewards) then
                                Notify(Library, "Error: Please Select Challenge Rewards [Challenge]!")
                            else
                                local ChallengeWorld = nil
                                local ChallengeType = nil
                                local ChallengeReward = nil
                                local ChallengeCleared = false

                                local Ready = false
                                for i,v in pairs(PlayerGui:GetChildren()) do
                                    if v:IsA("SurfaceGui") and v:FindFirstChild("LevelInfo") and v:FindFirstChild("Status") and v.LevelInfo.Reward.Text ~= "Holiday Rewards!" then
                                        if string.find(v.LevelInfo.Reward.Text, "Reward: ") then
                                            ChallengeWorld = v.LevelInfo.MapName.Text
                                            ChallengeType = v.LevelInfo.Difficulty.Text
                                            ChallengeReward = string.gsub(v.LevelInfo.Reward.Text, "Reward: ", "")
                                            if v.ChallengeCleared.Visible == true then
                                                ChallengeCleared = true
                                            end
                                        end
                                    end
                                end
                                if ChallengeCleared then
                                    IsTier2Finished = true
                                else
                                    if Worlds[ChallengeWorld] and Types[ChallengeType] and Rewards[ChallengeReward] then
                                        if CurrentSettings["Config"]["Team"]["Enable"] == true then
                                            local TeamToSwap = CurrentSettings["Config"]["Team"]["Challenge"]
                                            local Res = SwapTeam(TeamToSwap)
                                            if Res == false then
                                                Notify(Library, "Error: Not Found Team [Challenge]!")
                                            elseif Res == nil then
                                                Notify(Library, "Pending: Swapping Team!")
                                            elseif Res == true then
                                                Ready = true
                                            end
                                        else
                                            Ready = true
                                        end
                                        if Ready == true and ChallengeTeleportDebounce == false then
                                            ChallengeTeleportDebounce = true
                                            delay(30, function()
                                                ChallengeTeleportDebounce = false
                                            end)
                                            local Room = FindChallengeRoom()
                                            game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(Room)
                                        end
                                    else
                                        IsTier2Finished = true
                                    end
                                end
                            end
                        elseif CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Selected Function"] == "Christmas Challenge" then
                            local Worlds = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Christmas Challenge"]["Worlds"]
                            local Types = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Christmas Challenge"]["Types"]

                            if IsTableEmpty(Worlds) then
                                Notify(Library, "Error: Please Select Challenge Worlds [Christmas Challenge]!")
                            elseif IsTableEmpty(Types) then
                                Notify(Library, "Error: Please Select Challenge Types [Christmas Challenge]!")
                            else
                                local ChallengeWorld = nil
                                local ChallengeType = nil
                                local ChallengeCleared = false

                                local WorldMatch = false

                                local Ready = false
                                for i,v in pairs(PlayerGui:GetChildren()) do
                                    if v:IsA("SurfaceGui") and v:FindFirstChild("LevelInfo") and v:FindFirstChild("Status") and v.LevelInfo.Reward.Text == "Holiday Rewards!" then
                                        ChallengeWorld = v.LevelInfo.MapName.Text
                                        ChallengeType = v.LevelInfo.Difficulty.Text
                                        if v.ChallengeCleared.Visible == true then
                                            ChallengeCleared = true
                                        end
                                    end
                                end
                                for i,v in pairs(Worlds) do
                                    if string.find(ChallengeWorld, i) then
                                        WorldMatch = true
                                    end
                                end
                                if ChallengeCleared then
                                    IsTier2Finished = true
                                else
                                    if WorldMatch and Types[ChallengeType] then
                                        if CurrentSettings["Config"]["Team"]["Enable"] == true then
                                            local TeamToSwap = CurrentSettings["Config"]["Team"]["Infinite 50"]
                                            local Res = SwapTeam(TeamToSwap)
                                            if Res == false then
                                                Notify(Library, "Error: Not Found Team [Christmas Challenge]!")
                                            elseif Res == nil then
                                                Notify(Library, "Pending: Swapping Team!")
                                            elseif Res == true then
                                                Ready = true
                                            end
                                        else
                                            Ready = true
                                        end
                                        if Ready == true and ChallengeTeleportDebounce == false then
                                            ChallengeTeleportDebounce = true
                                            delay(20, function()
                                                ChallengeTeleportDebounce = false
                                            end)
                                            local Room = FindChristmasChallengeRoom()
                                            game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(Room)
                                        end
                                    else
                                        IsTier2Finished = true
                                    end
                                end
                            end
                        end
                    else
                        IsTier2Finished = true
                    end
                    if CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Auto Farm"] == true and IsTier3Finished == true and IsTier2Finished == true then
                        if CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Selected Function"] == "Story/Infinite" then
                            local Ready = false

                            if CurrentSettings["Config"]["Team"]["Enable"] == true then
                                local TeamToSwap = CurrentSettings["Config"]["Team"]["Story/Infinite"]
                                local Res = SwapTeam(TeamToSwap)
                                if Res == false then
                                    Notify(Library, "Error: Not Found Team [Story / Infinite]!")
                                elseif Res == nil then
                                    Notify(Library, "Pending: Swapping Team!")
                                elseif Res == true then
                                    Ready = true
                                end
                            else
                                Ready = true
                            end
                            if CurrentSettings["Config"]["Auto"]["Rejoin"]["Auto"] == true then
                                local World = AllWorlds[CurrentSettings["Config"]["Auto"]["Rejoin"]["World"]]
                                local Act = AllActs[CurrentSettings["Config"]["Auto"]["Rejoin"]["Act"]]
                                local Difficulty = CurrentSettings["Config"]["Auto"]["Rejoin"]["Difficulty"]
                                local Map = World..Act

                                if World and Act and Difficulty then
                                    if Act == "_infinite" then
                                        Difficulty = "Hard"
                                    end
                                    if string.find(CurrentSettings["Config"]["Auto"]["Rejoin"]["World"], "Legend") then
                                        Difficulty = "Hard"
                                    end

                                    if Ready == true and Player.TeleportingLock.Value == false and TeleportDebounce == false then
                                        TeleportDebounce = true
                                        delay(10, function()
                                            TeleportDebounce = false
                                        end)
                                        local Room = FindRoom()
                                        StartRoom(Room, Map, Difficulty)
                                    end
                                else
                                    Notify(Library, "Error: Please Settings First! [Auto Rejoin]")
                                end
                            end
                        elseif CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Selected Function"] == "Legend" then
                            local Ready = false

                            if CurrentSettings["Config"]["Team"]["Enable"] == true then
                                local TeamToSwap = CurrentSettings["Config"]["Team"]["Legend"]
                                local Res = SwapTeam(TeamToSwap)
                                if Res == false then
                                    Notify(Library, "Error: Not Found Team [Legend]!")
                                elseif Res == nil then
                                    Notify(Library, "Pending: Swapping Team!")
                                elseif Res == true then
                                    Ready = true
                                end
                            else
                                Ready = true
                            end
                            if CurrentSettings["Config"]["Auto"]["Rejoin"]["Auto"] == true then
                                local World = AllWorlds[CurrentSettings["Config"]["Auto"]["Rejoin"]["World"]]
                                local Act = AllActs[CurrentSettings["Config"]["Auto"]["Rejoin"]["Act"]]
                                local Difficulty = CurrentSettings["Config"]["Auto"]["Rejoin"]["Difficulty"]
                                local Map = World..Act

                                if World and Act and Difficulty then
                                    if Act == "_infinite" then
                                        Difficulty = "Hard"
                                    end
                                    if string.find(CurrentSettings["Config"]["Auto"]["Rejoin"]["World"], "Legend") then
                                        Difficulty = "Hard"
                                    end

                                    if Ready == true and Player.TeleportingLock.Value == false and TeleportDebounce == false then
                                        TeleportDebounce = true
                                        delay(10, function()
                                            TeleportDebounce = false
                                        end)
                                        local Room = FindRoom()
                                        StartRoom(Room, Map, Difficulty)
                                    end
                                else
                                    Notify(Library, "Error: Please Settings First! [Auto Rejoin]")
                                end
                            end
                        elseif CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Selected Function"] == "Dungeon" then
                            local Ready = false
                            if CurrentSettings["Config"]["Team"]["Enable"] == true then
                                local TeamToSwap = CurrentSettings["Config"]["Team"]["Dungeon"]
                                local Res = SwapTeam(TeamToSwap)
                                if Res == false then
                                    Notify(Library, "Error: Not Found Team [Dungeon]!")
                                elseif Res == nil then
                                    Notify(Library, "Pending: Swapping Team!")
                                elseif Res == true then
                                    Ready = true
                                end
                            else
                                Ready = true
                            end
                            if Ready == true and DungeonTeleportDebounce == false then
                                DungeonTeleportDebounce = true
                                delay(30, function()
                                    DungeonTeleportDebounce = false
                                end)
                                if CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Dungeon"]["Selected Dungeon"] == "Cursed Parade" then
                                    if PlayerGui.items.grid.List.Outer.ItemFrames:FindFirstChild("key_jjk_map") then
                                        local Room = FindRoomForDungeon("key_jjk_map")
                                        local args = {
                                            [1] = Room,
                                            [2] = {
                                                ["selected_key"] = "key_jjk_map"
                                            }
                                        }

                                        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
                                    end
                                elseif CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Dungeon"]["Selected Dungeon"] == "Cursed Womb" then
                                    local Room = FindRoomForDungeon("key_jjk_finger")
                                    if PlayerGui.items.grid.List.Outer.ItemFrames:FindFirstChild("key_jjk_finger") then
                                        local args = {
                                            [1] = Room,
                                            [2] = {
                                                ["selected_key"] = "key_jjk_finger"
                                            }
                                        }

                                        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
                                    end
                                elseif CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Dungeon"]["Selected Dungeon"] == "Karakora Town" then
                                    
                                end
                            end
                        elseif CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Selected Function"] == "Infinite Tower" then
                            local Ready = false
                            if CurrentSettings["Config"]["Team"]["Enable"] == true then
                                local TeamToSwap = CurrentSettings["Config"]["Team"]["Infinite 50"]
                                local Res = SwapTeam(TeamToSwap)
                                if Res == false then
                                    Notify(Library, "Error: Not Found Team [Infinite Tower]!")
                                elseif Res == nil then
                                    Notify(Library, "Pending: Swapping Team!")
                                elseif Res == true then
                                    Ready = true
                                end
                            else
                                Ready = true
                            end
                            if Ready == true and InfiniteTowerTeleportDebounce == false then
                                InfiniteTowerTeleportDebounce = true
                                delay(30, function()
                                    InfiniteTowerTeleportDebounce = false
                                end)
                                local Room = FindInfiniteTowerRoom()                 
                                game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_infinite_tower:InvokeServer(Room)
                            end
                        end
                    end
                end

                -- // Misc Script \\ --
                if CurrentSettings["Config"]["Miscellaneous"]["Auto Redeem Quest"] == true then
                    for i,v in pairs(PlayerGui.QuestsUI.Main.Main.Main.Content:GetChildren()) do 
                        if v:IsA("Frame") then
                            for ii,vv in pairs(v.Scroll:GetChildren()) do 
                                if vv:IsA("Frame") and vv:FindFirstChild("ClaimQuest") then
                                    if vv.ClaimQuest.Visible == true and MissionDebounce == false then
                                        MissionDebounce = true
                                        delay(1, function()
                                            MissionDebounce = false
                                        end)
                                        game:GetService("ReplicatedStorage").endpoints.client_to_server.redeem_quest:InvokeServer(tostring(vv.Name))
                                    end
                                end
                            end
                        end
                    end
                end
                if CurrentSettings["Config"]["Miscellaneous"]["Auto Take Daily Event Quest"] == true then
                    local IsQuestTaken = false
                    for i,v in pairs(PlayerGui.QuestsUI.Main.Main.Main.Content.event.Scroll:GetChildren()) do 
                        if v:IsA("Frame") then
                            if v:FindFirstChild("event") and v.event.Text == "Daily Mission" then
                                IsQuestTaken = true
                            end
                        end
                    end
                    if not IsQuestTaken then
                        game:GetService("ReplicatedStorage").endpoints.client_to_server.accept_npc_quest:InvokeServer("jojo_daily")
                    end
                end
                if CurrentSettings["Config"]["Miscellaneous"]["Auto Take Mission Quest"] == true then
                    if not PlayerGui.MissionUI.Main.Main.Main.Content.main.Scroll:FindFirstChild("Empty") then
                        for i,v in pairs(PlayerGui.MissionUI.Main.Main.Main.Content.main.Scroll:GetChildren()) do 
                            if v:IsA("Frame") and v:FindFirstChild("AcceptMission") and MissionDebounce == false then
                                MissionDebounce = true
                                delay(0.5, function()
                                    MissionDebounce = false
                                end)
                                pcall(function()
                                    for i,v in pairs(getconnections(v.AcceptMission.Activated)) do
                                        v:Fire()
                                    end
                                end) 
                            end
                        end
                    end
                end
            else
                if CurrentSettings["Config"]["Auto"]["Upgrade"]["Auto"] == true then
                    local CurrentWave = game:GetService("Workspace")["_wave_num"].Value
                    if CurrentWave >= CurrentSettings["Config"]["Auto"]["Upgrade"]["Wave"] then
                        AutoUpgrade()
                    end
                end
                if CurrentSettings["Config"]["Auto"]["Sell"]["Auto"] == true then
                    local CurrentWave = game:GetService("Workspace")["_wave_num"].Value
                    if CurrentWave >= CurrentSettings["Config"]["Auto"]["Sell"]["Wave"] then
                        AutoSell()
                    end
                end
                if CurrentSettings["Config"]["Auto"]["Leave"]["Auto"] == true and CurrentSettings["Config"]["Auto"]["Replay"]["Auto"] == false then
                    local CurrentWave = game:GetService("Workspace")["_wave_num"].Value
                    if CurrentWave >= CurrentSettings["Config"]["Auto"]["Leave"]["Wave"] then
                        AutoLeaveOrReplay()
                    end
                end
                if CurrentSettings["Config"]["Auto"]["Replay"]["Auto"] == true and CurrentSettings["Config"]["Auto"]["Leave"]["Auto"] == false then
                    local CurrentWave = game:GetService("Workspace")["_wave_num"].Value
                    AutoLeaveOrReplay()
                end                
                if CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Auto Farm"] == true then
                    local SelectedFunction =  CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Selected Function"] 
                    local World = PlayerGui.NewArea.holder.areaTitle.Text
                    local SelectedFarmType = CurrentSettings["Config"]["Auto Farm"]["Tier 1"][SelectedFunction]["Farm Type"]
                    if SelectedFunction == "Dungeon" then
                        World = PlayerGui.NewArea.holder.areaDescription.Text
                    end
                    if SelectedFarmType == "Auto Play" then
                        local CurrentMode = GetCurrentModeForAutoPlay()
                        if string.find(CurrentMode, SelectedFunction) then
                            if CurrentSettings["In Game Config"]["Auto Play"][CurrentMode][World] then
                                AutoPlay(CurrentMode)
                            else
                                Notify(Library, "Error: Not Found Auto Play Settings!")
                            end
                        end
                    elseif SelectedFarmType == "Macro" then
                        local CurrentMode = GetCurrentModeForMacro()
                        if string.find(CurrentMode, SelectedFunction) then
                            AutoMacro(Library, CurrentMode)
                        end
                    end
                end
                if CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Auto Farm"] == true then
                    local SelectedFunction =  CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Selected Function"] 
                    local World = PlayerGui.NewArea.holder.areaTitle.Text
                    local SelectedFarmType = CurrentSettings["Config"]["Auto Farm"]["Tier 2"][SelectedFunction]["Farm Type"]
                    if SelectedFarmType == "Auto Play" then
                        local CurrentMode = GetCurrentModeForAutoPlay()
                        if string.find(World, ")") then
                            for i,v in pairs(AllWorldsName) do
                                if string.find(World, v) then
                                    World = v
                                end
                            end
                        end
                        if string.find(CurrentMode, SelectedFunction) then
                            if CurrentSettings["In Game Config"]["Auto Play"][CurrentMode][World] then
                                AutoPlay(CurrentMode)
                            else
                                Notify(Library, "Error: Not Found Auto Play Settings!")
                            end
                        end
                    elseif SelectedFarmType == "Macro" then
                        local CurrentMode = GetCurrentModeForMacro()
                        if string.find(CurrentMode, SelectedFunction) then
                            AutoMacro(Library, CurrentMode)
                        end
                    end
                end
                if CurrentSettings["Config"]["Auto Farm"]["Tier 3"]["Auto Farm"] == true then
                    local SelectedFunction =  CurrentSettings["Config"]["Auto Farm"]["Tier 3"]["Selected Function"] 
                    local World = PlayerGui.NewArea.holder.areaTitle.Text
                    local SelectedFarmType = CurrentSettings["Config"]["Auto Farm"]["Tier 3"][SelectedFunction]["Farm Type"]
                    if SelectedFarmType == "Auto Play" then
                        local CurrentMode = GetCurrentModeForAutoPlay()
                        if string.find(CurrentMode, SelectedFunction) then
                            if CurrentSettings["In Game Config"]["Auto Play"][CurrentMode][World] then
                                AutoPlay(CurrentMode)
                            else
                                Notify(Library, "Error: Not Found Auto Play Settings!")
                            end
                        end
                    elseif SelectedFarmType == "Macro" then
                        local CurrentMode = GetCurrentModeForMacro()
                        if string.find(CurrentMode, SelectedFunction) then
                            AutoMacro(Library, CurrentMode)
                        end
                    end
                end
            end
        end

    -- // Save System \\ --
    CheckFolderAndFile()
    GetSettings()
    -- // Game Identifier System \\ --
    SetUpGameIdentifier()
    -- // Macro System \\ --
    SetUpMacro()
    -- // Summon System \\ --
    SetUpSummonSniper()
    -- // Webhook System \\ --
    SetUpWebhookSystem()
    -- // Claim Gift / Battle Pass \\ --
    ClaimGiftAndBattlePass()

    -- // Library \\ --
    local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/SinnyDEV/Lib/main/UI.lua"))()
    -- local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/SinnyDEV/Lib/main/SaveManager.lua"))()
    -- local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/SinnyDEV/Lib/main/ThemeManager.lua"))()

    local Window = Library:CreateWindow({
        Title = 'PLaNS SHOP',
        Center = true, 
        AutoShow = _G.ShowMyUI,
    })

    local Tabs = {
        ["Main"] = Window:AddTab('Main'),
        ["Auto Farm"] = Window:AddTab('Auto Farm'),
        ["Auto Farm Settings"] = Window:AddTab('Auto Farm Settings'),
        ["Shop"] = Window:AddTab('Shop'),
        ["Macro"] = Window:AddTab('Macro'),
        ["Webhook"] = Window:AddTab('Webhook'),
    }

    -- // Main [Tabs] \\ --
    if IsLobby() then
        local MainGroupBox = {
            ["Units Config"] = Tabs["Main"]:AddLeftGroupbox('Units Config'),
            ["Miscellaneous"] = Tabs["Main"]:AddLeftGroupbox('Miscellaneous'),
            ["Team Swap"] = Tabs["Main"]:AddRightGroupbox('Team Swap'),
        }
    
            -- // Units Config [Group Box] \\ --
            local UnitsUnlockedCount = CheckUnlockedUnits()
            local AllUnits = GetAllUnits()
            for i = 1,UnitsUnlockedCount do
                local UnitNumber = 'Unit '..tostring(i)
                local SelecetedUnit = i
                if CurrentSettings["Units Config"][UnitNumber]["Name"] then
                    SelecetedUnit = CurrentSettings["Units Config"][UnitNumber]["Name"].." #"..CurrentSettings["Units Config"][UnitNumber]["ID"]
                end
                local Unit = MainGroupBox["Units Config"]:AddDropdown(UnitNumber, {
                    Values = AllUnits,
                    Default =  SelecetedUnit,
                    Multi = false,
                    Text = UnitNumber,
                })
                Unit:OnChanged(function(value)
                    UpdateUnit(i, value)
                end)
            end
    
            MainGroupBox["Units Config"]:AddButton('Refresh Units List', function()
                local UnitsUnlockedCount = CheckUnlockedUnits()
                local AllUnits = GetAllUnits()
                for i = 1,UnitsUnlockedCount do
                    local UnitNumber = 'Unit '..tostring(i)
                    RefreshDropdown(Options[UnitNumber], AllUnits)
                end
            end)
    
            MainGroupBox["Units Config"]:AddButton('Set To Current Team', function()
                SetToCurrentTeam()
            end)
    
            -- // Miscellaneous [Group Box] \\ --
            MainGroupBox["Miscellaneous"]:AddButton('Teleport To Lobby', function()
                game:GetService("TeleportService"):Teleport(GamePlaceID, Player)
            end)
            MainGroupBox["Miscellaneous"]:AddButton('Hide Name', function()
                local OverHeadText = Player.Character:FindFirstChild("Head"):FindFirstChild("_overhead")
                if OverHeadText then
                    OverHeadText:Destroy()
                end
            end)
            local AutoRedeemQuest = MainGroupBox["Miscellaneous"]:AddToggle('Auto Redeem Quest', {
                Text = 'Auto Redeem Quest',
                Default = CurrentSettings["Config"]["Miscellaneous"]["Auto Redeem Quest"] or false,
            })
            local AutoTakeDailyEventQuest = MainGroupBox["Miscellaneous"]:AddToggle('Auto Take Daily Event Quest', {
                Text = 'Auto Take Daily Event Quest',
                Default = CurrentSettings["Config"]["Miscellaneous"]["Auto Take Daily Event Quest"] or false,
            })
            local AutoTakeMissionQuest = MainGroupBox["Miscellaneous"]:AddToggle('Auto Take Mission Quest', {
                Text = 'Auto Take Mission Quest',
                Default = CurrentSettings["Config"]["Miscellaneous"]["Auto Take Mission Quest"] or false,
            })
            AutoRedeemQuest:OnChanged(function(value)
                UpdateConfigLevel2("Miscellaneous", "Auto Redeem Quest", value)
            end)
            AutoTakeDailyEventQuest:OnChanged(function(value)
                UpdateConfigLevel2("Miscellaneous", "Auto Take Daily Event Quest", value)
            end)
            AutoTakeMissionQuest:OnChanged(function(value)
                UpdateConfigLevel2("Miscellaneous", "Auto Take Mission Quest", value)
            end)
    
            -- // Team Swap [Group Box] \\ --
            local TeamSwap = MainGroupBox["Team Swap"]:AddToggle('TeamSwap', {
                Text = 'Team Swap',
                Default = CurrentSettings["Config"]["Team"]["Enable"] or false,
                Tooltip = 'Team Swap', 
            })
            local SelectTeam = MainGroupBox["Team Swap"]:AddDropdown('Select Team', {
                Values = AllTeam,
                Default = 1, 
                Multi = false,  
                Text = 'Select Team',
            })
            MainGroupBox["Team Swap"]:AddDivider()
            local StoryAndInfiniteTeamDetail = MainGroupBox["Team Swap"]:AddDropdown('Story/Infinite Team Detail', {
                Values = GetTeamDetail("Story/Infinite") or {},
                Default = 1, 
                Multi = false,  
                Text = 'Story/Infinite Team Detail',
            })
            local LegendTeamDetail = MainGroupBox["Team Swap"]:AddDropdown('Legend Team Detail', {
                Values = GetTeamDetail("Legend") or {},
                Default = 1, 
                Multi = false,  
                Text = 'Legend Team Detail',
            })
            local Infinite50TeamDetail = MainGroupBox["Team Swap"]:AddDropdown('Infinite 50 Team Detail', {
                Values = GetTeamDetail("Infinite 50") or {},
                Default = 1, 
                Multi = false,  
                Text = 'Infinite 50 Team Detail',
            })
            local DungeonTeamDetail = MainGroupBox["Team Swap"]:AddDropdown('Dungeon Team Detail', {
                Values = GetTeamDetail("Dungeon") or {},
                Default = 1, 
                Multi = false,  
                Text = 'Dungeon Team Detail',
            })
            local ChallengeTeamDetail = MainGroupBox["Team Swap"]:AddDropdown('Challenge Team Detail', {
                Values = GetTeamDetail("Challenge") or {},
                Default = 1, 
                Multi = false,  
                Text = 'Challenge Team Detail',
            })
            local RaidTeamDetail = MainGroupBox["Team Swap"]:AddDropdown('Raid Team Detail', {
                Values = GetTeamDetail("Raid") or {},
                Default = 1, 
                Multi = false,  
                Text = 'Raid Team Detail',
            })
            TeamSwap:OnChanged(function(value)
                UpdateConfigLevel2("Team","Enable",value)
            end)
            SelectTeam:OnChanged(function(value)
                if value ~= AllTeam[1] then
                    local AllUnits = GetAllEquippedUnit()
                    UpdateTeam(value,AllUnits)
                    local StoryAndInfiniteTeam = GetTeamDetail("Story/Infinite")
                    local LegendTeam = GetTeamDetail("Legend")
                    local Infinite50Team = GetTeamDetail("Infinite 50")
                    local DungeonTeam = GetTeamDetail("Dungeon")
                    local ChallengeTeam = GetTeamDetail("Challenge")
                    local RaidTeam = GetTeamDetail("Raid")
                    RefreshDropdown(StoryAndInfiniteTeamDetail, StoryAndInfiniteTeam)
                    RefreshDropdown(LegendTeamDetail, LegendTeam)
                    RefreshDropdown(Infinite50TeamDetail, Infinite50Team)
                    RefreshDropdown(DungeonTeamDetail, DungeonTeam)
                    RefreshDropdown(ChallengeTeamDetail, ChallengeTeam)
                    RefreshDropdown(RaidTeamDetail, RaidTeam)
                    Notify(Library, "Success: "..tostring(value).." Has Set To Your Team.")
                end
            end)
    else
        local MainGroupBox = {
            ["In Game"] = Tabs["Main"]:AddLeftGroupbox('In Game'),
            ["Miscellaneous"] = Tabs["Main"]:AddLeftGroupbox('Miscellaneous'),
        }
        for i = 1,6 do
            for ii,v in pairs(CurrentSettings["Units Config"]) do
                if string.find(ii, tostring(i)) then
                    MainGroupBox["In Game"]:AddLabel(tostring(ii).." : "..tostring(v.Name))
                end
            end
        end
        MainGroupBox["Miscellaneous"]:AddButton('Teleport To Lobby', function()
            game:GetService("TeleportService"):Teleport(GamePlaceID, Player)
        end)
    end

    -- // Auto Farm [Tabs] \\ --
    local AutoFarmGroupBox = {
        ["Auto"] = Tabs["Auto Farm"]:AddLeftTabbox("Auto"),
        ["Auto 2"] = Tabs["Auto Farm"]:AddLeftTabbox("Auto 2"),
    }

        -- // Auto [Tab in Groupbox] \\ --
        local AutoRejoin = AutoFarmGroupBox["Auto"]:AddTab("Rejoin")
        local AutoUpgrade = AutoFarmGroupBox["Auto"]:AddTab("Upgrade")
        local AutoSkill = AutoFarmGroupBox["Auto"]:AddTab("Skill")

            -- // Auto Rejoin [Tab in Auto] \\ --
            AutoRejoin:AddLabel("This will work with Story/Infinite Only", true)
            local AR = AutoRejoin:AddToggle('Auto Rejoin', {
                Text = 'Auto Rejoin',
                Default = CurrentSettings["Config"]["Auto"]["Rejoin"]["Auto"] or false,
            })

            local SD = AutoRejoin:AddDropdown('Select Difficulty', {
                Values = { "Normal", "Hard" },
                Default = CurrentSettings["Config"]["Auto"]["Rejoin"]["Difficulty"] or 1,
                Multi = false,           
                Text = 'Select Difficulty',
            })

            local SW = AutoRejoin:AddDropdown('Select World', {
                Values = AllWorldsName,
                Default = CurrentSettings["Config"]["Auto"]["Rejoin"]["World"] or 1,
                Multi = false,           
                Text = 'Select World',
            })

            local SA = AutoRejoin:AddDropdown('Select Act', {
                Values = AllActsName,
                Default = CurrentSettings["Config"]["Auto"]["Rejoin"]["Act"] or 1,
                Multi = false,           
                Text = 'Select Act',
            })

            AR:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Rejoin","Auto",value)
            end)
            SD:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Rejoin","Difficulty",value)
            end)
            SW:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Rejoin","World",value)
                if string.find(value, "Legend") then
                    RefreshDropdown(SA, AllLegendActsName[value])
                end
            end)

            SA:SetValue(CurrentSettings["Config"]["Auto"]["Rejoin"]["Act"])
            SA:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Rejoin","Act",value)
            end)

            -- // Auto Upgrade [Tab in Auto] \\ --
            local AU = AutoUpgrade:AddToggle('Auto Upgrade', {
                Text = 'Auto Upgrade',
                Default = CurrentSettings["Config"]["Auto"]["Upgrade"]["Auto"] or false,
            })
            local UW = AutoUpgrade:AddInput('Upgrade Wave', {
                Default = CurrentSettings["Config"]["Auto"]["Upgrade"]["Wave"] or 1,
                Numeric = true,
                Finished = true, 
                Text = 'Will Upgrade After Wave:',
                Placeholder = 'Place Wave Count Here!', 
            })
            AU:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Upgrade","Auto",value)
            end)
            UW:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Upgrade","Wave",tonumber(value))
            end)

            -- // Auto Skill [Tab in Auto] \\ --
            
        -- // Auto 2 [Tab in Groupbox] \\ --
        local AutoSell = AutoFarmGroupBox["Auto 2"]:AddTab("Sell")
        local AutoLeave = AutoFarmGroupBox["Auto 2"]:AddTab("Leave")
        local AutoReplay = AutoFarmGroupBox["Auto 2"]:AddTab("Replay")

            -- // Auto Sell [Tab in Auto] \\ --
            local AS = AutoSell:AddToggle('Auto Sell', {
                Text = 'Auto Sell',
                Default = CurrentSettings["Config"]["Auto"]["Sell"]["Auto"] or false,
            })
            local SOW = AutoSell:AddInput('Sell On Wave', {
                Default = CurrentSettings["Config"]["Auto"]["Sell"]["Wave"] or 1,
                Numeric = true,
                Finished = true, 
                Text = 'Will Sell After Wave:',
                Placeholder = 'Place Wave Count Here!', 
            })
            AS:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Sell","Auto",value)
            end)
            SOW:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Sell","Wave",tonumber(value))
            end)

            -- // Auto Leave [Tab in Auto] \\ --
            local AL = AutoLeave:AddToggle('Auto Leave', {
                Text = 'Auto Leave',
                Default = CurrentSettings["Config"]["Auto"]["Leave"]["Auto"] or false,
            })
            local ALWRE = AutoLeave:AddToggle('Leave When Round Ended', {
                Text = 'Leave When Round Ended',
                Default = CurrentSettings["Config"]["Auto"]["Leave"]["Leave When Round Ended"] or false,
            })
            local LOW = AutoLeave:AddInput('Leave On Wave', {
                Default = CurrentSettings["Config"]["Auto"]["Leave"]["Wave"] or 1,
                Numeric = true,
                Finished = true, 
                Text = 'Will Leave After Wave:',
                Placeholder = 'Place Wave Count Here!', 
            })
            AL:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Leave","Auto",value)
            end)
            ALWRE:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Leave","Leave When Round Ended",value)
            end)
            LOW:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Leave","Wave",tonumber(value))
            end)

            -- // Auto Replay [Tab in Auto] \\ --
            local AR = AutoReplay:AddToggle('Auto Leave', {
                Text = 'Auto RePlay',
                Default = CurrentSettings["Config"]["Auto"]["Replay"]["Auto"] or false,
            })
            AR:OnChanged(function(value)
                UpdateConfigLevel3("Auto","Replay","Auto",value)
            end)

        if IsLobby() then
            AutoFarmGroupBox["Tier 1"] = Tabs["Auto Farm"]:AddRightGroupbox("Tier 1")
            AutoFarmGroupBox["Tier 2"] = Tabs["Auto Farm"]:AddRightGroupbox("Tier 2")
            AutoFarmGroupBox["Tier 3"] = Tabs["Auto Farm"]:AddRightGroupbox("Tier 3")

            -- // Tier 1 [Groupbox] \\ --
            local Tier1SelectFunction = AutoFarmGroupBox["Tier 1"]:AddDropdown('Select Function', {
                Values = Tier1Function,
                Default = CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Selected Function"] or 1,
                Multi = false,           
                Text = 'Select Function',
            })
            local Tier1AutoFarm = AutoFarmGroupBox["Tier 1"]:AddToggle('Auto Farm [Tier 1]', {
                Text = 'Auto Farm [Tier 1]',
                Default = CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Auto Farm"] or false,
            })
            Tier1SelectFunction:OnChanged(function(value)
                UpdateConfigLevel3("Auto Farm","Tier 1","Selected Function",value)
            end)
            Tier1AutoFarm:OnChanged(function(value)
                UpdateConfigLevel3("Auto Farm","Tier 1","Auto Farm",value)
            end)

            -- // Tier 2 [Groupbox] \\ --
            local Tier2SelectFunction = AutoFarmGroupBox["Tier 2"]:AddDropdown('Select Function', {
                Values = Tier2Function,
                Default = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Selected Function"] or 1,
                Multi = false,           
                Text = 'Select Function',
            })
            local Tier2AutoFarm = AutoFarmGroupBox["Tier 2"]:AddToggle('Auto Farm [Tier 2]', {
                Text = 'Auto Farm [Tier 2]',
                Default = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Auto Farm"] or false,
            })
            Tier2SelectFunction:OnChanged(function(value)
                UpdateConfigLevel3("Auto Farm","Tier 2","Selected Function",value)
            end)
            Tier2AutoFarm:OnChanged(function(value)
                UpdateConfigLevel3("Auto Farm","Tier 2","Auto Farm",value)
            end)

            -- // Tier 3 [Groupbox] \\ --
            local Tier3SelectFunction = AutoFarmGroupBox["Tier 3"]:AddDropdown('Select Function', {
                Values = Tier3Function,
                Default = CurrentSettings["Config"]["Auto Farm"]["Tier 3"]["Selected Function"] or 1,
                Multi = false,           
                Text = 'Select Function',
            })
            local Tier3AutoFarm = AutoFarmGroupBox["Tier 3"]:AddToggle('Auto Farm [Tier 3]', {
                Text = 'Auto Farm [Tier 3]',
                Default = CurrentSettings["Config"]["Auto Farm"]["Tier 3"]["Auto Farm"] or false,
            })
            Tier3SelectFunction:OnChanged(function(value)
                UpdateConfigLevel3("Auto Farm","Tier 3","Selected Function",value)
            end)
            Tier3AutoFarm:OnChanged(function(value)
                UpdateConfigLevel3("Auto Farm","Tier 3","Auto Farm",value)
            end)
        else
            AutoFarmGroupBox["Settings"] = Tabs["Auto Farm"]:AddRightGroupbox("Settings")
            local Tier = GetTier(GetCurrentMode())
            if Tier == 1 then
                local AutoFarm = AutoFarmGroupBox["Settings"]:AddToggle('Auto Farm [Tier 1]', {
                    Text = 'Auto Farm [Tier 1]',
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Auto Farm"] or false,
                })
                AutoFarm:OnChanged(function(value)
                    UpdateConfigLevel3("Auto Farm","Tier 1","Auto Farm",value)
                end)
            elseif Tier == 2 then
                local AutoFarm = AutoFarmGroupBox["Settings"]:AddToggle('Auto Farm [Tier 2]', {
                    Text = 'Auto Farm [Tier 2]',
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Auto Farm"] or false,
                })
                AutoFarm:OnChanged(function(value)
                    UpdateConfigLevel3("Auto Farm","Tier 2","Auto Farm",value)
                end)
            end
        end

    -- // Auto Farm Settings [Tabs] \\ --
    local AutoFarmSettingsGroupBox = {
        ["Upgrade Cap"] = Tabs["Auto Farm Settings"]:AddRightGroupbox("Upgrade Cap")
    }

        -- // Tier 1 [Tabbox] \\ --
        if IsLobby() then
            AutoFarmSettingsGroupBox["Tier 1"] = Tabs["Auto Farm Settings"]:AddLeftTabbox("Tier 1")
            AutoFarmSettingsGroupBox["Tier 2"] = Tabs["Auto Farm Settings"]:AddLeftTabbox("Tier 2")
            AutoFarmSettingsGroupBox["Tier 3"] = Tabs["Auto Farm Settings"]:AddLeftTabbox("Tier 3")

            local StoryAndInfinite = AutoFarmSettingsGroupBox["Tier 1"]:AddTab("Story/Inf")
            local DungeonAndLegend = AutoFarmSettingsGroupBox["Tier 1"]:AddTab("Dun/Legend")
            local InfiniteTower = AutoFarmSettingsGroupBox["Tier 1"]:AddTab("Inf Tower")
                
                -- // StoryAndInfinite [Tab in Tabbox] \\ --
                local FarmType = StoryAndInfinite:AddDropdown('Story/Infinite Farm Type', {
                    Values = AllFarmType,
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Story/Infinite"]["Farm Type"] or 1,
                    Multi = false,           
                    Text = 'Select Farm Type',
                })
                FarmType:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 1","Story/Infinite","Farm Type",value)
                end)

                -- // DungeonAndLegend [Tab in Tabbox] \\ --
                local SelectDungeon = DungeonAndLegend:AddDropdown('Dungeon Farm Type', {
                    Values = AllDungeon,
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Dungeon"]["Selected Dungeon"] or 1,
                    Multi = false,           
                    Text = 'Select Dungeon',
                })
                local DungeonFarmType = DungeonAndLegend:AddDropdown('Dungeon Farm Type', {
                    Values = AllFarmType,
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Dungeon"]["Farm Type"] or 1,
                    Multi = false,           
                    Text = 'Select Farm Type (Dungeon)',
                })
                local LegendFarmType = DungeonAndLegend:AddDropdown('Legend Farm Type', {
                    Values = AllFarmType,
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Legend"]["Farm Type"] or 1,
                    Multi = false,           
                    Text = 'Select Farm Type (Legend)',
                })

                SelectDungeon:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 1","Dungeon","Selected Dungeon",value)
                end)
                DungeonFarmType:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 1","Dungeon","Farm Type",value)
                end)
                LegendFarmType:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 1","Legend","Farm Type",value)
                end)

                -- // InfiniteTower [Tab in Tabbox] \\ --
                local FarmType = InfiniteTower:AddDropdown('Infinite Tower Farm Type', {
                    Values = AllFarmType,
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 1"]["Infinite Tower"]["Farm Type"] or 1,
                    Multi = false,           
                    Text = 'Select Farm Type',
                })
                FarmType:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 1","Infinite Tower","Farm Type",value)
                end)

            -- // Tier 2 [Tabbox] \\ --
            local Challenge = AutoFarmSettingsGroupBox["Tier 2"]:AddTab("Challenge")
            local ChristmasChallenge = AutoFarmSettingsGroupBox["Tier 2"]:AddTab("Christmas")
            local Mission = AutoFarmSettingsGroupBox["Tier 2"]:AddTab("Mission")
                
                -- // Challenge [Tab in Tabbox] \\ --
                local FarmType = Challenge:AddDropdown('Challenge Farm Type', {
                    Values = AllFarmType,
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Challenge"]["Farm Type"] or 1,
                    Multi = false,           
                    Text = 'Select Farm Type',
                })
                local ChallengeWorldNeeded = Challenge:AddDropdown('Challenge World Needed', {
                    Values = AllWorldsName,
                    Default = 1,
                    Multi = true,           
                    Text = 'Select Needed World',
                })
                local ChallengeTypeNeeded = Challenge:AddDropdown('Challenge Type Needed', {
                    Values = AllChallengeTypes,
                    Default =  1,
                    Multi = true,           
                    Text = 'Select Needed Challenge Type',
                })
                local ChallengeRewardNeeded = Challenge:AddDropdown('Challenge Reward Needed', {
                    Values = AllChallengeRewards,
                    Default = 1,
                    Multi = true,           
                    Text = 'Select Needed Challenge Reward',
                })

                ChallengeWorldNeeded:SetValue(CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Challenge"]["Worlds"])
                ChallengeTypeNeeded:SetValue(CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Challenge"]["Types"])
                ChallengeRewardNeeded:SetValue(CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Challenge"]["Rewards"])

                FarmType:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 2","Challenge","Farm Type",value)
                end)
                ChallengeWorldNeeded:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 2","Challenge","Worlds",value)
                end)
                ChallengeTypeNeeded:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 2","Challenge","Types",value)
                end)
                ChallengeRewardNeeded:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 2","Challenge","Rewards",value)
                end)

                -- // Christmas Challenge [Tab in Tabbox] \\ --
                local FarmType = ChristmasChallenge:AddDropdown('Christmas Challenge Farm Type', {
                    Values = AllFarmType,
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Christmas Challenge"]["Farm Type"] or 1,
                    Multi = false,           
                    Text = 'Select Farm Type',
                })
                local ChristmasChallengeWorldNeeded = ChristmasChallenge:AddDropdown('Christmas Challenge World Needed', {
                    Values = AllWorldsName,
                    Default = 1,
                    Multi = true,           
                    Text = 'Select Needed World',
                })
                local ChristmasChallengeTypeNeeded = ChristmasChallenge:AddDropdown('Christmas Challenge Type Needed', {
                    Values = AllChallengeTypes,
                    Default =  1,
                    Multi = true,           
                    Text = 'Select Needed Challenge Type',
                })

                FarmType:SetValue(CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Christmas Challenge"]["Worlds"])
                ChristmasChallengeWorldNeeded:SetValue(CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Christmas Challenge"]["Worlds"])
                ChristmasChallengeTypeNeeded:SetValue(CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Christmas Challenge"]["Types"])

                FarmType:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 2","Christmas Challenge","Farm Type",value)
                end)
                ChristmasChallengeWorldNeeded:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 2","Christmas Challenge","Worlds",value)
                end)
                ChristmasChallengeTypeNeeded:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 2","Christmas Challenge","Types",value)
                end)

                -- // Mission [Tab in Tabbox] \\ --
                local FarmType = Mission:AddDropdown('Mission Farm Type', {
                    Values = AllFarmType,
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Mission"]["Farm Type"] or 1,
                    Multi = false,           
                    Text = 'Select Farm Type',
                })
                local AutoJoin = Mission:AddToggle('Auto Join Mission', {
                    Text = 'Auto Join Mission World/Act',
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 2"]["Mission"]["Auto Join"] or false,
                })
                AutoJoin:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 2","Mission","Auto Join",value)
                end)
                FarmType:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 2","Mission","Farm Type",value)
                end)

            -- // Tier 3 [Tabbox] \\ --
            local Raid = AutoFarmSettingsGroupBox["Tier 3"]:AddTab("Raid")
                
                -- // Raid [Tab in Tabbox] \\ --
                local FarmType = Raid:AddDropdown('Mission Farm Type', {
                    Values = AllFarmType,
                    Default = CurrentSettings["Config"]["Auto Farm"]["Tier 3"]["Raid"]["Farm Type"] or 1,
                    Multi = false,           
                    Text = 'Select Farm Type',
                })
                FarmType:OnChanged(function(value)
                    UpdateConfigLevel4("Auto Farm","Tier 3","Raid","Farm Type",value)
                end)
        else
            AutoFarmSettingsGroupBox["Data"] = Tabs["Auto Farm Settings"]:AddLeftGroupbox("Data")
            local DataLabel = AutoFarmSettingsGroupBox["Data"]:AddLabel('', true)
            local CurrentMode = GetCurrentMode()
            local Tier = GetTier(CurrentMode)
            DataLabel:SetText(CurrentMode.." | Tier "..tostring(Tier))
            local SelectedFarmType = GetSelectedFarmType(Tier, CurrentMode)
            if SelectedFarmType == "Auto Play" then
                local World = PlayerGui.NewArea.holder.areaTitle.Text
                if CurrentMode == "Dungeon" then
                    World = PlayerGui.NewArea.holder.areaDescription.Text
                elseif CurrentMode == "Christmas Challenge" then
                    for i,v in pairs(AllWorldsName) do
                        if string.find(World, v) then
                            World = v
                        end
                    end
                end
                AutoFarmSettingsGroupBox["Data"]:AddDivider()
                AssignUnitSet(AutoFarmSettingsGroupBox["Data"], GetCurrentModeForAutoPlay(), World)
            end
        end
        -- // Upgrade Cap [Group Box] \\ --
        local UpgradeCapToggle = AutoFarmSettingsGroupBox["Upgrade Cap"]:AddToggle('Upgrade Cap', {
            Text = 'Upgrade Cap',
            Default = CurrentSettings["Config"]["Auto"]["Upgrade"]["Cap"]["Cap"] or false,
        })
        for i = 1,6 do
            local UpCap = AutoFarmSettingsGroupBox["Upgrade Cap"]:AddSlider('Unit '..tostring(i).." Cap: ", {
                Text = 'Unit '..tostring(i).." Cap: ",          
                Default = CurrentSettings["Config"]["Auto"]["Upgrade"]["Cap"]["Unit "..tostring(i)] or 10,
                Min = 1,
                Max = 10,
                Rounding = 0,
            })
            UpCap:OnChanged(function(value)
                UpdateConfigLevel4("Auto","Upgrade","Cap","Unit "..tostring(i),value)
            end)
        end
        UpgradeCapToggle:OnChanged(function(value)
            UpdateConfigLevel4("Auto","Upgrade","Cap","Cap",value)
        end)

    -- // Shop [Tabs] \\ --
    local ShopGroupBox = {
        ["Auto Merchant"] = Tabs["Shop"]:AddLeftGroupbox("Auto Merchant"),
        ["Summon Sniper"] = Tabs["Shop"]:AddLeftGroupbox("Summon Sniper"),
    }

    local AutoBuy = ShopGroupBox["Auto Merchant"]:AddToggle('Auto Buy Merchant', {
        Text = 'Auto Buy Merchant Item',
        Default = CurrentSettings["Config"]["Shop"]["Merchant"]["Auto Buy"] or false,
    })

    local SelectMerchantItems = ShopGroupBox["Auto Merchant"]:AddDropdown('Select Merchant Items', {
        Values = AllSellItemsName,
        Default = 1,
        Multi = true,
        Text = 'Select Merchant Items',
    }) 

    local SelectBannerUnit = ShopGroupBox["Summon Sniper"]:AddDropdown('Select Banner Unit', {
        Values = AllLegendaryAndMythicUnitsInGame,
        Default = 1,
        Multi = true,
        Text = 'Select Banner Unit',
    })
    local FindUnitsName = ShopGroupBox["Summon Sniper"]:AddInput('Find Select Macro', {
        Default = '',
        Numeric = false, 
        Finished = false,
        Text = "Find Unit's Name",
        Placeholder = "Unit's Name",
    })

    ShopGroupBox["Summon Sniper"]:AddButton('Reset Units', function()
        UpdateGameIdentifierLevel2("Summon Sniper", "Finded Units", {})
        Notify(Library, "Success: Reset All Finded Units!")
    end)

    local AutoSummon = ShopGroupBox["Summon Sniper"]:AddToggle('Auto Summon', {
        Text = 'Auto Summon',
        Default = CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Auto Summon"] or false,
    })
    local SpecialBanner = ShopGroupBox["Summon Sniper"]:AddToggle('Special Banner', {
        Text = 'Special Banner',
        Default = CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Special Banner"] or false,
    })
    local OnlyRollIfPity = ShopGroupBox["Summon Sniper"]:AddToggle('Only Roll If Pity', {
        Text = 'Only Roll If Pity',
        Default = CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Only Roll If Pity"] or false,
    })
    local UseSummonTicket = ShopGroupBox["Summon Sniper"]:AddToggle('Use Summon Ticket', {
        Text = 'Use Summon Ticket',
        Default = CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Use Summon Ticket"] or false,
    })
    
    SelectMerchantItems:SetValue(CurrentSettings["Config"]["Shop"]["Merchant"]["Items"])

    SelectMerchantItems:OnChanged(function(value)
        UpdateConfigLevel3("Shop","Merchant","Items",value)
    end)
    AutoBuy:OnChanged(function(value)
        UpdateConfigLevel3("Shop","Merchant","Auto Buy",value)
    end)

    SelectBannerUnit:SetValue(CurrentSettings["Config"]["Shop"]["Summon Sniper"]["Units"])

    SelectBannerUnit:OnChanged(function(value)
        UpdateConfigLevel3("Shop","Summon Sniper","Units",value)
    end)
    FindUnitsName:OnChanged(function(value)
        FindUnit(SelectBannerUnit, value)
    end)
    AutoSummon:OnChanged(function(value)
        UpdateConfigLevel3("Shop","Summon Sniper","Auto Summon",value)
    end)
    SpecialBanner:OnChanged(function(value)
        UpdateConfigLevel3("Shop","Summon Sniper","Special Banner",value)
    end)
    OnlyRollIfPity:OnChanged(function(value)
        UpdateConfigLevel3("Shop","Summon Sniper","Only Roll If Pity",value)
    end)
    UseSummonTicket:OnChanged(function(value)
        UpdateConfigLevel3("Shop","Summon Sniper","Use Summon Ticket",value)
    end)

    -- // Macro [Tabs] \\ --
    local MacroGroupBox = {
        ["Macro Config"] = Tabs["Macro"]:AddLeftGroupbox("Macro Config"),
        ["Macro Import/Export"] = Tabs["Macro"]:AddLeftGroupbox("Macro Import/Export"),
        ["Macro Check"] = Tabs["Macro"]:AddLeftGroupbox("Macro Check"),
        ["Macro"] = Tabs["Macro"]:AddRightGroupbox("Macro"),
    }

        -- // Macro Config [Groupbox] \\ --
        local SelectMacro = MacroGroupBox["Macro Config"]:AddDropdown('Select Macro', {
            Values = GetAllMacros() or {},
            Default = CurrentSettings["In Game Config"]["Macro"]["Selected Macro"] or 1,
            Multi = false,
            Text = 'Select Macro',
        })
        local FindSelectMacro = MacroGroupBox["Macro Config"]:AddInput('Find Select Macro', {
            Default = '',
            Numeric = false, 
            Finished = false,
            Text = "Find Macro's Name",
            Tooltip = 'Find Macro', 
            Placeholder = "Macro's Name",
        })
        local CreateMacroInput = MacroGroupBox["Macro Config"]:AddInput('Create Macro', {
            Default = '',
            Numeric = false, 
            Finished = true,
            Text = 'Create Macro',
            Tooltip = 'Press Enter To Create', 
            Placeholder = "Macro's Name",
        })
        MacroGroupBox["Macro Config"]:AddButton('Refresh Macro List', function()
            RefreshDropdown(SelectMacro, GetAllMacros())
        end)
        MacroGroupBox["Macro Config"]:AddButton('Delete Selected Macro', function()
            DeleteMacro(Library, SelectMacro, SelectMacro.Value)
            RefreshAllMacrosDropdown()
        end)
        if not IsLobby() then
            MacroGroupBox["Macro Config"]:AddDivider()
            local MacroStatus = MacroGroupBox["Macro Config"]:AddLabel('Macro Status: Idle')
            MacroGroupBox["Macro Config"]:AddButton('Start/Stop Record Macro', function()
                if RecordingMacro == false then
                    RecordingMacro = true
                    MacroStatus:SetText("Macro Status: Recording")
                elseif RecordingMacro == true then
                    RecordingMacro = false
                    MacroStatus:SetText("Macro Status: Idle")
                end
                StartOrStopRecordMacro(Library, RecordingMacro)
            end)
        end

        SelectMacro:OnChanged(function(value)
            CheckFolderAndFile(CurrentSettings)
            local OldData = HttpService:JSONDecode(readfile(SettingsFilePath))
            OldData["In Game Config"]["Macro"]["Selected Macro"] = value
            CurrentSettings["In Game Config"]["Macro"]["Selected Macro"] = value
            writefile(SettingsFilePath, HttpService:JSONEncode(OldData))
            RefreshDropdown(SelectMacro, GetAllMacros())
        end)
        FindSelectMacro:OnChanged(function(value)
            FindMacro(SelectMacro, value)
        end)
        CreateMacroInput:OnChanged(function(value)
            CreateMacro(Library, SelectMacro, value)
            RefreshAllMacrosDropdown()
        end)

        -- // Macro Check [Groupbox] \\ --
        local ModeLabel = MacroGroupBox["Macro Check"]:AddLabel('Mode: ?', true)
        local WorldLabel = MacroGroupBox["Macro Check"]:AddLabel('World: ?', true)
        local ActionLabel = MacroGroupBox["Macro Check"]:AddLabel('Action Count: ?', true)
        MacroGroupBox["Macro Check"]:AddButton('Check Macro', function()
            local MacroToCheck = SelectMacro.Value
            local Response = CheckMacro(Library, MacroToCheck)
            if Response then
                ModeLabel:SetText("Mode: "..Response[1])
                WorldLabel:SetText("World: "..Response[2])
                ActionLabel:SetText("Action Count: "..tostring(Response[3]))
            end
        end)

        -- // Macro Import/Export [Groupbox] \\ --
        MacroGroupBox["Macro Import/Export"]:AddButton('Import Macro', function()
            ImportMacro(Library)
        end)
        MacroGroupBox["Macro Import/Export"]:AddButton('Export Macro', function()
            ExportMacro(Library)
        end)

        -- // Macro [Groupbox] \\ --
        local MacroElement = MacroGroupBox["Macro"]:AddDropdown('Select Macros', {
            Values = GetAllMacros(),
            Default = GetAllSelectedMacros(),
            Multi = true,
            Text = "Select Macros",
        })
        local FindSelectMacros = MacroGroupBox["Macro"]:AddInput('Find Select Macro', {
            Default = '',
            Numeric = false, 
            Finished = false,
            Text = "Find Macro's Name",
            Tooltip = 'Find Macro', 
            Placeholder = "Macro's Name",
        })
        MacroElement:OnChanged(function(value)
            SetSelectMacro(value)
        end)
        FindSelectMacros:OnChanged(function(value)
            FindMacro(MacroElement, value)
        end)

    -- // Webhook [Tabs] \\ --
    local WebhookGroupbox = {
        ["Webhook"] = Tabs["Webhook"]:AddLeftGroupbox('Webhook'),
    }
    local WebhookInput = WebhookGroupbox["Webhook"]:AddInput('Your Webhook', {
        Default = CurrentSettings["Config"]["Webhook"]["URL"] or '',
        Numeric = false,
        Finished = true,
        Text = 'Your Webhook',
        Placeholder = 'Webhook Here!',
    })
    local IDInput = WebhookGroupbox["Webhook"]:AddInput('ID', {
        Default = CurrentSettings["Config"]["Webhook"]["ID"] or '',
        Numeric = false,
        Finished = true,
        Text = 'Your ID',
        Placeholder = 'ID Here!',
    })
    local SendWhenReturnToLobby = WebhookGroupbox["Webhook"]:AddToggle('Send When Return To Lobby', {
        Text = 'Send When Return To Lobby',
        Default = CurrentSettings["Config"]["Webhook"]["Send When Return To Lobby"] or false,
    })
    local SendWhenRoundStarted = WebhookGroupbox["Webhook"]:AddToggle('Send When Round Started', {
        Text = 'Send When Round Started',
        Default = CurrentSettings["Config"]["Webhook"]["Send When Round Started"] or false,
    })
    local SendWhenRoundEnded = WebhookGroupbox["Webhook"]:AddToggle('Send When Round Ended', {
        Text = 'Send When Round Ended',
        Default = CurrentSettings["Config"]["Webhook"]["Send When Round Ended"] or false,
    })
    local MaxGem = WebhookGroupbox["Webhook"]:AddInput('Max Gem', {
        Default = CurrentSettings["Game Identifier"]["Webhook"]["Max Gem"] or 0,
        Numeric = true,
        Finished = true,
        Text = 'Max Gem',
        Placeholder = 'Enter Here!',
    })
    local CheckCurrency = WebhookGroupbox["Webhook"]:AddToggle('Check Currency', {
        Text = 'Check Currency',
        Default = CurrentSettings["Config"]["Webhook"]["Check Currency"] or false,
    })
    WebhookInput:OnChanged(function(value)
        if value ~= nil and value ~= "" then
            UpdateConfigLevel2("Webhook","URL",value)
            Notify(Library, "Success: Set Webhook URL To '"..value.."'")
        end
    end)
    IDInput:OnChanged(function(value)
        if value ~= nil and value ~= "" then
            UpdateConfigLevel2("Webhook","ID",value)
            Notify(Library, "Success: Set ID To '"..value.."'")
        end
    end)
    SendWhenReturnToLobby:OnChanged(function(value)
        UpdateConfigLevel2("Webhook","Send When Return To Lobby",value)
    end)
    SendWhenRoundStarted:OnChanged(function(value)
        UpdateConfigLevel2("Webhook","Send When Round Started",value)
    end)
    SendWhenRoundEnded:OnChanged(function(value)
        UpdateConfigLevel2("Webhook","Send When Round Ended",value)
    end)
    MaxGem:OnChanged(function(v)
        local value = tonumber(v)
        if value ~= nil and value ~= 0 and value > 0 then
            UpdateGameIdentifierLevel2("Webhook","Max Gem",value)
        end
    end)
    CheckCurrency:OnChanged(function(value)
        UpdateConfigLevel2("Webhook","Check Currency",value)
    end)
    

    -- // Auto Farm \\ --
    game:GetService("RunService").Heartbeat:Connect(function()
        StartScript(Library)
    end)
end
